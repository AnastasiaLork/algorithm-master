import telebot
import config
from telebot import *
from write_db import *
from peewee import *

bot = telebot.TeleBot(config.TOKEN)
#photoSed = open('C:/Users/Anastasia/Desktop/algorithm-master/sed.jpg', 'rb')
#photoHappy = open('C:/Users/Anastasia/Desktop/algorithm-master/happy.jpg', 'rb')

@bot.message_handler(commands=['start'])
def welcome(message):
    bot.send_message(message.chat.id,f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {message.from_user.first_name}!".format(message.from_user, bot.get_me()),
                     parse_mode='html')
    create_user(message.from_user.id,message.from_user.first_name)
    bot.send_message(message.chat.id, f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, {message.from_user.first_name}, —Å–∫–∞–∂–∏, –∏–∑ –∫–∞–∫–æ–π —Ç—ã –≥—Ä—É–ø–ø—ã?",
                     parse_mode='html')
    name_group = message.text
    print(message.text)
    bot.register_next_step_handler(message,update_name_group_user,name_group)



@bot.message_handler(content_types=['text'])
def get_name_group_user(message):


    if message.text == '–ú–µ–Ω—é':
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        item_Schedule = types.KeyboardButton("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏")
        item_quit_my_friend = types.KeyboardButton("–£–π–¥—É –ª–∏ —è —Å –¥—Ä—É–≥–æ–º\–ø–æ–¥—Ä—É–≥–æ–π?")
        markup.add(item_Schedule, item_quit_my_friend)
        bot.send_message(message.chat.id, "–ü—Ä–µ–∫—Ä–∞—Å–Ω–æ, —á—Ç–æ –∂–µ–ª–∞–µ—à—å —É–∑–Ω–∞—Ç—å?",
                         parse_mode='html', reply_markup=markup)
    if message.chat.type == 'private':
        if message.text == '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏':

            murkup_parity = types.ReplyKeyboardMarkup(resize_keyboard=True)
            percent_two_is_true = types.KeyboardButton('–ü–µ—Ä–≤–∞—è')
            percent_two_is_false = types.KeyboardButton('–í—Ç–æ—Ä–∞—è')
            menu = types.KeyboardButton('–ú–µ–Ω—é')
            murkup_parity.add(percent_two_is_true, percent_two_is_false,menu)
            bot.send_message(message.chat.id,
                             '–ü–æ–∂–∞–ª—É–π—Å—Ç–≤–∞ –≤—ã–±–µ—Ä–∏ –Ω–µ–¥–µ–ª—é (P.S. –ø–µ—Ä–≤–∞—è - –≤–µ—Ä—Ö–Ω—è—è'
                             ' –Ω–µ–¥–µ–ª—è –≤ —Ñ–∞–π–ª–µ excel)', parse_mode='html', reply_markup=murkup_parity)
        elif message.text == '–ü–µ—Ä–≤–∞—è':
            murkup_day_week_chet = types.InlineKeyboardMarkup(row_width=2)
            mon = types.InlineKeyboardButton("–ü–Ω", callback_data='mon_chet')
            tue = types.InlineKeyboardButton("–í—Ç", callback_data='tue_chet')
            wed = types.InlineKeyboardButton("–°—Ä", callback_data='wed_chet')
            thu = types.InlineKeyboardButton("–ß—Ç", callback_data='thu_chet')
            fri = types.InlineKeyboardButton("–ü—Ç", callback_data='fri_chet')
            sat = types.InlineKeyboardButton("–°–±", callback_data='sat_chet')
            murkup_day_week_chet.add(mon, tue, wed, thu, fri, sat)
            bot.send_message(message.chat.id, "–ü—Ä–µ–∫—Ä–∞—Å–Ω–æ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏(‚óè'‚ó°'‚óè)",
                             parse_mode='html', reply_markup=murkup_day_week_chet)
        elif message.text == '–í—Ç–æ—Ä–∞—è':
            murkup_day_week_ne_chet = types.InlineKeyboardMarkup(row_width=2)
            mon = types.InlineKeyboardButton("–ü–Ω", callback_data='mon_ne_chet')
            tue = types.InlineKeyboardButton("–í—Ç", callback_data='tue_ne_chet')
            wed = types.InlineKeyboardButton("–°—Ä", callback_data='wed_ne_chet')
            thu = types.InlineKeyboardButton("–ß—Ç", callback_data='thu_ne_chet')
            fri = types.InlineKeyboardButton("–ü—Ç", callback_data='fri_ne_chet')
            sat = types.InlineKeyboardButton("–°–±", callback_data='sat_ne_chet')
            murkup_day_week_ne_chet.add(mon, tue, wed, thu, fri, sat)
            bot.send_message(message.chat.id, "–ü—Ä–µ–∫—Ä–∞—Å–Ω–æ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏(‚óè'‚ó°'‚óè)",
                             parse_mode='html', reply_markup=murkup_day_week_ne_chet)
        elif message.text == '–£–π–¥—É –ª–∏ —è —Å –¥—Ä—É–≥–æ–º\–ø–æ–¥—Ä—É–≥–æ–π?':
            bot.send_message(message.chat.id, "–ü—Ä–µ–∫—Ä–∞—Å–Ω–æ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–∫–∞–∂–∏, –∏–∑ –∫–∞–∫–æ–π –≥—Ä—É–ø–ø—ã —Ç–≤–æ–π –¥—Ä—É–≥\–ø–æ–¥—Ä—É–≥–∞?\n"
                                              "‚ï∞(*¬∞‚ñΩ¬∞*)‚ïØ",
                             parse_mode='html')
            bot.register_next_step_handler(message,quit_name_group)
    else:
        bot.send_message(message.chat.id,
                         f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ —à—É—Ç–∏ —Å–æ –º–Ω–æ–π {message.from_user.first_name} {message.from_user.last_name}",
                         parse_mode='html')

def update_name_group_user(message,name_group):
    if chek_group_user(message.text, message.from_user.id) == True:
        murkup_quit_home_menu = types.ReplyKeyboardMarkup(resize_keyboard=True)
        quit_menu = types.KeyboardButton('–ú–µ–Ω—é')
        murkup_quit_home_menu.add(quit_menu)
        bot.send_message(message.chat.id, '–û—Ç–ª–∏—á–Ω–æ, –¥–∞–≤–∞–π –ø–µ—Ä–µ–π–¥–µ–º –≤ –ú–µ–Ω—é', parse_mode='html', reply_markup=murkup_quit_home_menu)

    else:
        bot.send_message(message.chat.id, "–ö –ø—Ä–∏–≤–µ–ª–∏–∫–æ–º—É —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ –Ω–∞—à–µ–ª –≤ —Å–≤–æ–µ–π –±–∞–∑–µ, –ø–æ–¥–æ–±–Ω–æ–π –≥—Ä—É–ø–ø—ã,"
                                          " –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å, –Ω–µ –¥–æ–ø—É—Å—Ç–∏–ª –ª–∏ —Ç—ã –æ—á–µ–ø—è—Ç–∫—É?",
                         parse_mode='html')
#inline_button –∫–Ω–æ–ø–∫–∏, —Ä–µ–∞–∫—Ü–∏—è –Ω–∞ –≤—ã–∑–æ–≤—ã –ø–æ callback_data
@bot.callback_query_handler(func=lambda call: True)
def callback_inline(call):
    try:
        if call.message:
            if call.data == 'mon_chet':
                schedule_day_week_db = []
                print("done")
                schedule_day_week_db = schedule_day_week('–ü–û–ù–ï–î–ï–õ–¨–ù–ò–ö', '1', call.from_user.id)
                time_begin_lesson = ['8:30','10:10','11:50','13:40','15:20','17:00']
                time_end_lesson = ['10:00','11:40','13:20','15:10','16:50','18:30']
                para = ""
                para += "<u>üìé –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫:</u>\n"
                chek = True
                murkup_quit_home_menu = types.ReplyKeyboardMarkup(resize_keyboard=True)
                quit_menu = types.KeyboardButton('–ú–µ–Ω—é')
                murkup_quit_home_menu.add(quit_menu)
                for i in range(len(schedule_day_week_db)):
                    for y in range(len(schedule_day_week_db[i])):
                        if schedule_day_week_db[i][y] != "–û–∫–Ω–æ":
                            chek = True
                            break
                        else:
                            chek = False
                            break
                    if chek == True:
                        para += f" <b> ‚è∞ –ù–∞—á–∞–ª–æ –ø–∞—Ä—ã –≤ {time_begin_lesson[i]}</b>  \n"
                    for y in range(len(schedule_day_week_db[i])):
                        if schedule_day_week_db[i][y] != "–û–∫–Ω–æ":
                            para += f"        {schedule_day_week_db[i][y]}  \n"
                        else:
                            continue
                bot.send_message(call.message.chat.id, para + "\n", parse_mode='html', reply_markup=murkup_quit_home_menu)
            elif call.data == 'tue_chet':
                schedule_day_week_db = []
                print("done")
                schedule_day_week_db = schedule_day_week('–í–¢–û–†–ù–ò–ö', '1', call.from_user.id)
                time_begin_lesson = ['8:30', '10:10', '11:50', '13:40', '15:20', '17:00']
                time_end_lesson = ['10:00', '11:40', '13:20', '15:10', '16:50', '18:30']
                para = ""
                para += "<u>üìé –í—Ç–æ—Ä–Ω–∏–∫:</u>\n"
                chek = True
                murkup_quit_home_menu = types.ReplyKeyboardMarkup(resize_keyboard=True)
                quit_menu = types.KeyboardButton('–ú–µ–Ω—é')
                murkup_quit_home_menu.add(quit_menu)
                for i in range(len(schedule_day_week_db)):
                    for y in range(len(schedule_day_week_db[i])):
                        if schedule_day_week_db[i][y] != "–û–∫–Ω–æ":
                            chek = True
                            break
                        else:
                            chek = False
                            break
                    if chek == True:
                        para += f" <b> ‚è∞ –ù–∞—á–∞–ª–æ –ø–∞—Ä—ã –≤ {time_begin_lesson[i]}</b>  \n"
                    for y in range(len(schedule_day_week_db[i])):
                        if schedule_day_week_db[i][y] != "–û–∫–Ω–æ":
                            para += f"        {schedule_day_week_db[i][y]}  \n"
                        else:
                            continue
                bot.send_message(call.message.chat.id, para + "\n", parse_mode='html',
                                 reply_markup=murkup_quit_home_menu)
            #–°—Ä–µ–¥–∞
            elif call.data == 'wed_chet':
                 schedule_day_week_db = []
                 schedule_day_week_db = schedule_day_week('–°–†–ï–î–ê', '1', call.from_user.id)
                 time_begin_lesson = ['8:30', '10:10', '11:50', '13:40', '15:20', '17:00']
                 time_end_lesson = ['10:00', '11:40', '13:20', '15:10', '16:50', '18:30']
                 para = ""
                 para += "<u>üìé –°—Ä–µ–¥–∞:</u>\n"
                 chek = True
                 murkup_quit_home_menu = types.ReplyKeyboardMarkup(resize_keyboard=True)
                 quit_menu = types.KeyboardButton('–ú–µ–Ω—é')
                 murkup_quit_home_menu.add(quit_menu)
                 for i in range(len(schedule_day_week_db)):
                     for y in range(len(schedule_day_week_db[i])):
                         if schedule_day_week_db[i][y] != "–û–∫–Ω–æ":
                             chek = True
                             break
                         else:
                             chek = False
                             break
                     if chek == True:
                         para += f" <b> ‚è∞ –ù–∞—á–∞–ª–æ –ø–∞—Ä—ã –≤ {time_begin_lesson[i]}</b>  \n"
                     for y in range(len(schedule_day_week_db[i])):
                         if schedule_day_week_db[i][y] != "–û–∫–Ω–æ":
                             para += f"        {schedule_day_week_db[i][y]}  \n"
                         else:
                             continue
                 bot.send_message(call.message.chat.id, para + "\n", parse_mode='html',reply_markup=murkup_quit_home_menu)
            #–ß–µ—Ç–≤–µ—Ä–≥
            elif call.data == 'thu_chet':
                 schedule_day_week_db = []
                 schedule_day_week_db = schedule_day_week('–ß–ï–¢–í–ï–†–ì', '1', call.from_user.id)
                 time_begin_lesson = ['8:30', '10:10', '11:50', '13:40', '15:20', '17:00']
                 time_end_lesson = ['10:00', '11:40', '13:20', '15:10', '16:50', '18:30']
                 para = ""
                 para += "<u>üìé –ß–µ—Ç–≤–µ—Ä–≥:</u>\n"
                 chek = True
                 murkup_quit_home_menu = types.ReplyKeyboardMarkup(resize_keyboard=True)
                 quit_menu = types.KeyboardButton('–ú–µ–Ω—é')
                 murkup_quit_home_menu.add(quit_menu)
                 for i in range(len(schedule_day_week_db)):
                     for y in range(len(schedule_day_week_db[i])):
                         if schedule_day_week_db[i][y] != "–û–∫–Ω–æ":
                             chek = True
                             break
                         else:
                             chek = False
                             break
                     if chek == True:
                         para += f" <b> ‚è∞ –ù–∞—á–∞–ª–æ –ø–∞—Ä—ã –≤ {time_begin_lesson[i]}</b>  \n"
                     for y in range(len(schedule_day_week_db[i])):
                         if schedule_day_week_db[i][y] != "–û–∫–Ω–æ":
                             para += f"        {schedule_day_week_db[i][y]}  \n"
                         else:
                             continue
                 bot.send_message(call.message.chat.id, para + "\n", parse_mode='html',reply_markup=murkup_quit_home_menu)
            #–ü—è—Ç–Ω–∏—Ü–∞
            elif call.data == 'fri_chet':
                 schedule_day_week_db = []
                 schedule_day_week_db = schedule_day_week('–ü–Ø–¢–ù–ò–¶–ê', '1', call.from_user.id)
                 time_begin_lesson = ['8:30', '10:10', '11:50', '13:40', '15:20', '17:00']
                 time_end_lesson = ['10:00', '11:40', '13:20', '15:10', '16:50', '18:30']
                 para = ""
                 para += "<u>üìé –ü—è—Ç–Ω–∏—Ü–∞:</u>\n"
                 chek = True
                 murkup_quit_home_menu = types.ReplyKeyboardMarkup(resize_keyboard=True)
                 quit_menu = types.KeyboardButton('–ú–µ–Ω—é')
                 murkup_quit_home_menu.add(quit_menu)
                 for i in range(len(schedule_day_week_db)):
                     for y in range(len(schedule_day_week_db[i])):
                         if schedule_day_week_db[i][y] != "–û–∫–Ω–æ":
                             chek = True
                             break
                         else:
                             chek = False
                             break
                     if chek == True:
                         para += f" <b> ‚è∞ –ù–∞—á–∞–ª–æ –ø–∞—Ä—ã –≤ {time_begin_lesson[i]}</b>  \n"
                     for y in range(len(schedule_day_week_db[i])):
                         if schedule_day_week_db[i][y] != "–û–∫–Ω–æ":
                             para += f"        {schedule_day_week_db[i][y]}  \n"
                         else:
                             continue
                 bot.send_message(call.message.chat.id, para + "\n", parse_mode='html',reply_markup=murkup_quit_home_menu)
            #–°—É–±–±–æ—Ç–∞
            elif call.data == 'sat_chet':
                 schedule_day_week_db = []
                 schedule_day_week_db = schedule_day_week('–°–£–ë–ë–û–¢–ê', '1', call.from_user.id)
                 time_begin_lesson = ['8:30', '10:10', '11:50', '13:40', '15:20', '17:00']

                 para = ""
                 para += "<u>üìé –°—É–±–±–æ—Ç–∞:</u>\n"
                 chek = True
                 murkup_quit_home_menu = types.ReplyKeyboardMarkup(resize_keyboard=True)
                 quit_menu = types.KeyboardButton('–ú–µ–Ω—é')
                 murkup_quit_home_menu.add(quit_menu)
                 for i in range(len(schedule_day_week_db)):
                     for y in range(len(schedule_day_week_db[i])):
                         if schedule_day_week_db[i][y] != "–û–∫–Ω–æ":
                             chek = True
                             break
                         else:
                             chek = False
                             break
                     if chek == True:
                         para += f" <b> ‚è∞ –ù–∞—á–∞–ª–æ –ø–∞—Ä—ã –≤ {time_begin_lesson[i]}</b>  \n"
                     for y in range(len(schedule_day_week_db[i])):
                         if schedule_day_week_db[i][y] != "–û–∫–Ω–æ":
                             para += f"        {schedule_day_week_db[i][y]}  \n"
                         else:
                             continue
                 bot.send_message(call.message.chat.id, para + "\n", parse_mode='html',reply_markup=murkup_quit_home_menu)
            elif call.data == 'mon_ne_chet':
                 schedule_day_week_db = []
                 schedule_day_week_db = schedule_day_week('–ü–û–ù–ï–î–ï–õ–¨–ù–ò–ö', '2', call.from_user.id)
                 time_begin_lesson = ['8:30', '10:10', '11:50', '13:40', '15:20', '17:00']
                 time_end_lesson = ['10:00', '11:40', '13:20', '15:10', '16:50', '18:30']
                 para = ""
                 para += "<u>üìé –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫:</u>\n"
                 chek = True
                 murkup_quit_home_menu = types.ReplyKeyboardMarkup(resize_keyboard=True)
                 quit_menu = types.KeyboardButton('–ú–µ–Ω—é')
                 murkup_quit_home_menu.add(quit_menu)
                 for i in range(len(schedule_day_week_db)):
                     for y in range(len(schedule_day_week_db[i])):
                         if schedule_day_week_db[i][y] != "–û–∫–Ω–æ":
                             chek = True
                             break
                         else:
                             chek = False
                             break
                     if chek == True:
                         para += f" <b> ‚è∞ –ù–∞—á–∞–ª–æ –ø–∞—Ä—ã –≤ {time_begin_lesson[i]}</b>  \n"
                     for y in range(len(schedule_day_week_db[i])):
                         if schedule_day_week_db[i][y] != "–û–∫–Ω–æ":
                             para += f"        {schedule_day_week_db[i][y]}  \n"
                         else:
                             continue
                 bot.send_message(call.message.chat.id, para + "\n", parse_mode='html',reply_markup=murkup_quit_home_menu)
            #–í—Ç–æ—Ä–Ω–∏–∫
            elif call.data == 'tue_ne_chet':
                 schedule_day_week_db = []
                 schedule_day_week_db = schedule_day_week('–í–¢–û–†–ù–ò–ö', '2', call.from_user.id)
                 time_begin_lesson = ['8:30', '10:10', '11:50', '13:40', '15:20', '17:00']
                 time_end_lesson = ['10:00', '11:40', '13:20', '15:10', '16:50', '18:30']
                 para = ""
                 para += "<u>üìé –í—Ç–æ—Ä–Ω–∏–∫:</u>\n"
                 chek = True
                 murkup_quit_home_menu = types.ReplyKeyboardMarkup(resize_keyboard=True)
                 quit_menu = types.KeyboardButton('–ú–µ–Ω—é')
                 murkup_quit_home_menu.add(quit_menu)
                 for i in range(len(schedule_day_week_db)):
                     for y in range(len(schedule_day_week_db[i])):
                         if schedule_day_week_db[i][y] != "–û–∫–Ω–æ":
                             chek = True
                             break
                         else:
                             chek = False
                             break
                     if chek == True:
                         para += f" <b> ‚è∞ –ù–∞—á–∞–ª–æ –ø–∞—Ä—ã –≤ {time_begin_lesson[i]}</b>  \n"
                     for y in range(len(schedule_day_week_db[i])):
                         if schedule_day_week_db[i][y] != "–û–∫–Ω–æ":
                             para += f"        {schedule_day_week_db[i][y]}  \n"
                         else:
                             continue
                 bot.send_message(call.message.chat.id, para + "\n", parse_mode='html',reply_markup=murkup_quit_home_menu)
            #–°—Ä–µ–¥–∞
            elif call.data == 'wed_ne_chet':
                 schedule_day_week_db = []
                 schedule_day_week_db = schedule_day_week('–°–†–ï–î–ê', '2', call.from_user.id)
                 time_begin_lesson = ['8:30', '10:10', '11:50', '13:40', '15:20', '17:00']
                 time_end_lesson = ['10:00', '11:40', '13:20', '15:10', '16:50', '18:30']
                 para = ""
                 para += "<u>üìé –°—Ä–µ–¥–∞:</u>\n"
                 chek = True
                 murkup_quit_home_menu = types.ReplyKeyboardMarkup(resize_keyboard=True)
                 quit_menu = types.KeyboardButton('–ú–µ–Ω—é')
                 murkup_quit_home_menu.add(quit_menu)
                 for i in range(len(schedule_day_week_db)):
                     for y in range(len(schedule_day_week_db[i])):
                         if schedule_day_week_db[i][y] != "–û–∫–Ω–æ":
                             chek = True
                             break
                         else:
                             chek = False
                             break
                     if chek == True:
                         para += f" <b> ‚è∞ –ù–∞—á–∞–ª–æ –ø–∞—Ä—ã –≤ {time_begin_lesson[i]}</b>  \n"
                     for y in range(len(schedule_day_week_db[i])):
                         if schedule_day_week_db[i][y] != "–û–∫–Ω–æ":
                             para += f"        {schedule_day_week_db[i][y]}  \n"
                         else:
                             continue
                 bot.send_message(call.message.chat.id, para + "\n", parse_mode='html',reply_markup=murkup_quit_home_menu)
            #–ß–µ—Ç–≤–µ—Ä–≥
            elif call.data == 'thu_ne_chet':
                 schedule_day_week_db = []
                 schedule_day_week_db = schedule_day_week('–ß–ï–¢–í–ï–†–ì', '2', call.from_user.id)
                 time_begin_lesson = ['8:30', '10:10', '11:50', '13:40', '15:20', '17:00']
                 time_end_lesson = ['10:00', '11:40', '13:20', '15:10', '16:50', '18:30']
                 para = ""
                 para += "<u>üìé –ß–µ—Ç–≤–µ—Ä–≥:</u>\n"
                 chek = True
                 murkup_quit_home_menu = types.ReplyKeyboardMarkup(resize_keyboard=True)
                 quit_menu = types.KeyboardButton('–ú–µ–Ω—é')
                 murkup_quit_home_menu.add(quit_menu)
                 for i in range(len(schedule_day_week_db)):
                     for y in range(len(schedule_day_week_db[i])):
                         if schedule_day_week_db[i][y] != "–û–∫–Ω–æ":
                             chek = True
                             break
                         else:
                             chek = False
                             break
                     if chek == True:
                         para += f" <b> ‚è∞ –ù–∞—á–∞–ª–æ –ø–∞—Ä—ã –≤ {time_begin_lesson[i]}</b>  \n"
                     for y in range(len(schedule_day_week_db[i])):
                         if schedule_day_week_db[i][y] != "–û–∫–Ω–æ":
                             para += f"        {schedule_day_week_db[i][y]}  \n"
                         else:
                             continue
                 bot.send_message(call.message.chat.id, para + "\n", parse_mode='html',reply_markup=murkup_quit_home_menu)
            #–ü—è—Ç–Ω–∏—Ü–∞
            elif call.data == 'fri_ne_chet':
                 schedule_day_week_db = []
                 schedule_day_week_db = schedule_day_week('–ü–Ø–¢–ù–ò–¶–ê', '2', call.from_user.id)
                 time_begin_lesson = ['8:30', '10:10', '11:50', '13:40', '15:20', '17:00']
                 time_end_lesson = ['10:00', '11:40', '13:20', '15:10', '16:50', '18:30']
                 para = ""
                 para += "<u>üìé –ü—è—Ç–Ω–∏—Ü–∞:</u>\n"
                 chek = True
                 murkup_quit_home_menu = types.ReplyKeyboardMarkup(resize_keyboard=True)
                 quit_menu = types.KeyboardButton('–ú–µ–Ω—é')
                 murkup_quit_home_menu.add(quit_menu)
                 for i in range(len(schedule_day_week_db)):
                     for y in range(len(schedule_day_week_db[i])):
                         if schedule_day_week_db[i][y] != "–û–∫–Ω–æ":
                             chek = True
                             break
                         else:
                             chek = False
                             break
                     if chek == True:
                         para += f" <b> ‚è∞ –ù–∞—á–∞–ª–æ –ø–∞—Ä—ã –≤ {time_begin_lesson[i]}</b>  \n"
                     for y in range(len(schedule_day_week_db[i])):
                         if schedule_day_week_db[i][y] != "–û–∫–Ω–æ":
                             para += f"        {schedule_day_week_db[i][y]}  \n"
                         else:
                             continue
                 bot.send_message(call.message.chat.id, para + "\n", parse_mode='html',reply_markup=murkup_quit_home_menu)
            elif call.data == 'sat_ne_chet':
                 schedule_day_week_db = []
                 schedule_day_week_db = schedule_day_week('–°–£–ë–ë–û–¢–ê', '2', call.from_user.id)
                 time_begin_lesson = ['8:30', '10:10', '11:50', '13:40', '15:20', '17:00']
                 time_end_lesson = ['10:00', '11:40', '13:20', '15:10', '16:50', '18:30']
                 para = ""
                 para += "<u>üìé –°—É–±–±–æ—Ç–∞:</u>\n"
                 chek = True
                 murkup_quit_home_menu = types.ReplyKeyboardMarkup(resize_keyboard=True)
                 quit_menu = types.KeyboardButton('–ú–µ–Ω—é')
                 murkup_quit_home_menu.add(quit_menu)
                 for i in range(len(schedule_day_week_db)):
                     for y in range(len(schedule_day_week_db[i])):
                         if schedule_day_week_db[i][y] != "–û–∫–Ω–æ":
                             chek = True
                             break
                         else:
                             chek = False
                             break
                     if chek == True:
                         para += f" <b> ‚è∞ –ù–∞—á–∞–ª–æ –ø–∞—Ä—ã –≤ {time_begin_lesson[i]}</b>  \n"
                     for y in range(len(schedule_day_week_db[i])):
                         if schedule_day_week_db[i][y] != "–û–∫–Ω–æ":
                             para += f"        {schedule_day_week_db[i][y]}  \n"
                         else:
                             continue
                 bot.send_message(call.message.chat.id, para + "\n", parse_mode='html',reply_markup=murkup_quit_home_menu)
    except Exception as e:
        print(repr(e))
#–Ω—É –ø—Ä–∏–≤–µ—Ç, —É–π–¥—É –Ω–µ —É–π–¥—É —Å –¥—Ä—É–≥–æ–º

def quit_name_group(message):
    if chek_group_user_friend(message.text) == True:


        murkup_parity_quit = types.ReplyKeyboardMarkup(resize_keyboard=True)
        quit_parity_chet = types.KeyboardButton('–ü–µ—Ä–≤–∞—è')
        quit_parity_non = types.KeyboardButton('–í—Ç–æ—Ä–∞—è')
        name_frined_group = message.text
        murkup_parity_quit.add(quit_parity_chet, quit_parity_non)
        bot.send_message(message.from_user.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –Ω–µ–¥–µ–ª—é', parse_mode='html',
                         reply_markup=murkup_parity_quit)
        bot.register_next_step_handler(message,quit_chet,name_frined_group)

    else:
        bot.send_message(message.chat.id,
                         "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≥—Ä—É–ø–ø—ã —Ç–≤–æ–µ–≥–æ (–ø–æ-)–¥—Ä—É–≥–∞(-–∏) –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–≤–µ—Ä—å –ø–æ–∂–∞–ª—É–π—Å—Ç–∞"
                         "–≤–¥—Ä—É–≥ –±—ã–ª–∞ –∫–∞–∫–∞—è-—Ç–æ –æ—á–µ–ø—è—Ç–∫–∞‚ï∞(*¬∞‚ñΩ¬∞*)‚ïØ", parse_mode='html', reply_markup=murkup_parity_quit)


def quit_chet(message,name_group):
        if message.text == '–ü–µ—Ä–≤–∞—è':
            murkup_day_week_ne_chet = types.ReplyKeyboardMarkup(resize_keyboard=True)
            mon = types.KeyboardButton("–ü–Ω-1")
            tue = types.KeyboardButton("–í—Ç-1")
            wed = types.KeyboardButton("–°—Ä-1")
            thu = types.KeyboardButton("–ß—Ç-1")
            fri = types.KeyboardButton("–ü—Ç-1")
            sat = types.KeyboardButton("–°–±-1")
            murkup_day_week_ne_chet.add(mon, tue, wed, thu, fri, sat)
            bot.send_message(message.chat.id, "–ü—Ä–µ–∫—Ä–∞—Å–Ω–æ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏(‚óè'‚ó°'‚óè)",
                             parse_mode='html', reply_markup=murkup_day_week_ne_chet)
            bot.register_next_step_handler(message,quit_rezult,name_group)
        if message.text == '–í—Ç–æ—Ä–∞—è':
            murkup_day_week_ne_chet = types.ReplyKeyboardMarkup(resize_keyboard=True)
            mon = types.KeyboardButton("–ü–Ω-2")
            tue = types.KeyboardButton("–í—Ç-2")
            wed = types.KeyboardButton("–°—Ä-2")
            thu = types.KeyboardButton("–ß—Ç-2")
            fri = types.KeyboardButton("–ü—Ç-2")
            sat = types.KeyboardButton("–°–±-2")
            murkup_day_week_ne_chet.add(mon, tue, wed, thu, fri, sat)
            bot.send_message(message.chat.id, "–ü—Ä–µ–∫—Ä–∞—Å–Ω–æ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏(‚óè'‚ó°'‚óè)",
                             parse_mode='html', reply_markup=murkup_day_week_ne_chet)
            bot.register_next_step_handler(message, quit_rezult, name_group)
def quit_rezult(message, name_group):
    #–ø–µ—Ä–≤–∞—è –ù–ï–î–ï–õ–Ø
    if message.text == '–ü–Ω-1':
        hour_group_user_last_hour = times_db('–ü–û–ù–ï–î–ï–õ–¨–ù–ò–ö', '1', message.from_user.id)
        hour_group_friend_last_hour = times_db_friend('–ü–û–ù–ï–î–ï–õ–¨–ù–ò–ö', '1', name_group)
        hour_group_user_first_hour = times_db_first('–ü–û–ù–ï–î–ï–õ–¨–ù–ò–ö', '1', message.from_user.id)
        hour_group_friend_first_hour = times_db_friend_first('–ü–û–ù–ï–î–ï–õ–¨–ù–ò–ö', '1', name_group)
        murkup_quit_home_menu = types.ReplyKeyboardMarkup(resize_keyboard=True)
        quit_menu = types.KeyboardButton('–ú–µ–Ω—é')
        murkup_quit_home_menu.add(quit_menu)
        hour_user_items = []
        time_begin_lesson = ['8:30', '10:10', '11:50', '13:40', '15:20', '17:00']
        time_end_lesson = ['10:00', '11:40', '13:20', '15:10', '16:50', '18:30']
        hour = ['1-2', '3-4', '5-6', '7-8', '9-10', '11-12']
        #last_user
        for i in range(0, len(hour_group_user_last_hour)):
            for y in range(0, len(hour)):
                if hour_group_user_last_hour[i] == hour[y]:
                    hour_user_items.append(hour.index(hour[y]))
        hour_group_user_last_hour = []
        for i in range(0, len(hour_user_items)):
            hour_group_user_last_hour.append(time_end_lesson[hour_user_items[i]])
        #begin_user
        hour_user_items =[]
        for i in range(0, len(hour_group_user_first_hour)):
            for y in range(0, len(hour)):
                if hour_group_user_first_hour[i] == hour[y]:
                    hour_user_items.append(hour.index(hour[y]))
        hour_group_user_first_hour = []
        for i in range(0,len(hour_user_items)):
            hour_group_user_first_hour.append(time_begin_lesson[hour_user_items[i]])
        hour_user_items = []
        # last_friend
        for i in range(0, len(hour_group_friend_last_hour)):
            for y in range(0, len(hour)):
                if hour_group_friend_last_hour[i] == hour[y]:
                    hour_user_items.append(hour.index(hour[y]))
        hour_group_friend_last_hour = []
        for i in range(0, len(hour_user_items)):
            hour_group_friend_last_hour.append(time_end_lesson[hour_user_items[i]])
        # begin_friend
        hour_user_items = []
        for i in range(0, len(hour_group_friend_first_hour)):
            for y in range(0, len(hour)):
                if hour_group_friend_first_hour[i] == hour[y]:
                    hour_user_items.append(hour.index(hour[y]))
        hour_group_friend_first_hour = []
        for i in range(0, len(hour_user_items)):
            hour_group_friend_first_hour.append(time_begin_lesson[hour_user_items[i]])
        if len(hour_group_user_last_hour) == 0 and len(hour_group_friend_last_hour) > 0:
            bot.send_message(message.chat.id, f'–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –Ω–µ —É–π–¥–µ—Ç–µ –≤–º–µ—Å—Ç–µ, —Ç—ã –Ω–µ —É—á–∏—à—å—Å—è –≤ —ç—Ç–æ—Ç –¥–µ–Ω—å,'
                                              f' –∞ —Ç–≤–æ–π –¥—Ä—É–≥ –∑–∞–∫–æ–Ω—á–∏—Ç –≤ '
                                              f'<b><u>{hour_group_friend_last_hour[-1]}</u></b>.\n'
                                              f'–ù–µ –≥—Ä—É—Å—Ç–∏—Ç–µ, –º–æ–∂–µ—Ç –≤ –¥—Ä—É–≥–æ–π —Ä–∞–∑üòé', parse_mode='html')
            bot.send_photo(message.chat.id, photo=open('C:/Users/Anastasia/Desktop/algorithm-master/sed.jpg', 'rb'), reply_markup=murkup_quit_home_menu) ############################################
        elif len(hour_group_friend_last_hour) == 0 and len(hour_group_user_last_hour) == 0:
            bot.send_message(message.chat.id, f'–°–µ–≥–æ–¥–Ω—è –Ω–∏ —Ç—ã, –Ω–∏ —Ç–≤–æ–π –¥—Ä—É–≥ –Ω–µ —É—á–∏—Ç–µ—Å—å!\n'
                                              f'üéâüéâüéâüéâüéâ', parse_mode='html',
                             reply_markup=murkup_quit_home_menu)
        elif len(hour_group_friend_last_hour) == 0 and len(hour_group_user_last_hour) > 0:
            bot.send_message(message.chat.id, f'–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –Ω–µ —É–π–¥–µ—Ç–µ –≤–º–µ—Å—Ç–µ, —Ç—ã –∑–∞–∫–æ–Ω—á–∏—à—å –≤ '
                                              f'<b><u>{hour_group_user_last_hour[-1]}</u></b>,'
                                              f' –∞ —Ç–≤–æ–π –¥—Ä—É–≥ —Å–µ–≥–æ–¥–Ω—è –Ω–µ —É—á–∏—Ç—Å—è.\n'
                                              f'–ù–µ –≥—Ä—É—Å—Ç–∏—Ç–µ, –º–æ–∂–µ—Ç –≤ –¥—Ä—É–≥–æ–π —Ä–∞–∑üòé', parse_mode='html')
            bot.send_photo(message.chat.id, photo=open('C:/Users/Anastasia/Desktop/algorithm-master/sed.jpg', 'rb'),
                             reply_markup=murkup_quit_home_menu)  ###################################
        elif len(hour_group_friend_last_hour) > 0 and len(hour_group_user_last_hour) > 0:
            if hour_group_user_last_hour[-1] == hour_group_friend_last_hour[-1]:
                if hour_group_user_first_hour[0] == hour_group_friend_first_hour[0]:
                    bot.send_message(message.chat.id, f'–î–∞, –≤—ã —Å–º–æ–∂–µ—Ç–µ —É–π—Ç–∏ –≤–º–µ—Å—Ç–µ —Å –¥—Ä—É–≥–æ–º. –ù–æ –∏ –ø–æ–π—Ç–∏ –Ω–∞'
                                                      f' —É—Ä–æ–∫–∏ –≤—ã —Å–º–æ–∂–µ—Ç–µ –≤–º–µ—Å—Ç–µ, –≤–µ–¥—å –Ω–∞—á–Ω–µ—Ç–µ –≤—ã –≤ '
                                                      f'<b><u>{hour_group_friend_first_hour[0]}</u></b>, –∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ –≤ '
                                                      f'<b><u>{hour_group_friend_last_hour[-1]}</u></b>üòé',
                                     parse_mode='html')
                    bot.send_photo(message.chat.id, photo=open('C:/Users/Anastasia/Desktop/algorithm-master/happy.jpg', 'rb'), reply_markup=murkup_quit_home_menu)  ##########
                else:
                    bot.send_message(message.chat.id, f'–î–∞, –≤—ã —Å–º–æ–∂–µ—Ç–µ —É–π—Ç–∏ –≤–º–µ—Å—Ç–µ —Å –¥—Ä—É–≥–æ–º. –ù–æ –ø–æ–π—Ç–∏ –Ω–∞'
                                                      f' —É—Ä–æ–∫–∏ –≤–º–µ—Å—Ç–µ –Ω–µ —Å–º–æ–∂–µ—Ç–µ. –í—ã –∑–∞–∫–æ–Ω—á–∏—Ç–µ –≤'
                                                      f' <b><u>{hour_group_friend_last_hour[-1]}</u></b>üòé',
                                     parse_mode='html')
                    bot.send_photo(message.chat.id, photo=open('C:/Users/Anastasia/Desktop/algorithm-master/happy.jpg', 'rb'), reply_markup=murkup_quit_home_menu)  ########
            else:
                if hour_group_user_first_hour[0] == hour_group_friend_first_hour[0]:
                    bot.send_message(message.chat.id,
                                     f'–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –Ω–µ —Å–º–æ–∂–µ—Ç–µ —É–π—Ç–∏ –≤–º–µ—Å—Ç–µ —Å –¥—Ä—É–≥–æ–º.'
                                     f' –ù–æ –ø–æ–π—Ç–∏ –Ω–∞ —É—Ä–æ–∫–∏ –≤–º–µ—Å—Ç–µ –º–æ–∂–µ—Ç–µ, –≤–µ–¥—å –Ω–∞—á–∏–Ω–∞–µ—Ç–µ –≤—ã –≤ '
                                     f'<b><u>{hour_group_friend_first_hour[0]}</u></b>üòé',
                                     parse_mode='html')
                    bot.send_photo(message.chat.id, photo=open('C:/Users/Anastasia/Desktop/algorithm-master/sed.jpg', 'rb'), reply_markup=murkup_quit_home_menu)  ############
                else:
                    bot.send_message(message.chat.id, f'–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –Ω–µ —Å–º–æ–∂–µ—Ç–µ —É–π—Ç–∏ –≤–º–µ—Å—Ç–µ –∏ –ø–æ–π—Ç–∏ –≤–º–µ—Å—Ç–µ —Å –¥—Ä—É–≥–æ–º.',
                                     parse_mode='html')
                    bot.send_photo(message.chat.id, photo=open('C:/Users/Anastasia/Desktop/algorithm-master/sed.jpg', 'rb'), reply_markup=murkup_quit_home_menu)  ##########
    elif message.text == '–í—Ç-1':
        hour_group_user_last_hour = []
        hour_group_friend_last_hour = []
        hour_group_user_first_hour = []
        hour_group_friend_first_hour = []
        hour_group_user_last_hour = times_db('–í–¢–û–†–ù–ò–ö', '1', message.from_user.id)
        hour_group_friend_last_hour = times_db_friend('–í–¢–û–†–ù–ò–ö', '1', name_group)
        hour_group_user_first_hour = times_db_first('–í–¢–û–†–ù–ò–ö', '1', message.from_user.id)
        hour_group_friend_first_hour = times_db_friend_first('–í–¢–û–†–ù–ò–ö', '1', name_group)
        murkup_quit_home_menu = types.ReplyKeyboardMarkup(resize_keyboard=True)
        quit_menu = types.KeyboardButton('–ú–µ–Ω—é')
        murkup_quit_home_menu.add(quit_menu)
        hour_user_items = []
        time_begin_lesson = ['8:30', '10:10', '11:50', '13:40', '15:20', '17:00']
        time_end_lesson = ['10:00', '11:40', '13:20', '15:10', '16:50', '18:30']
        hour = ['1-2', '3-4', '5-6', '7-8', '9-10', '11-12']
        # last_user
        for i in range(0, len(hour_group_user_last_hour)):
            for y in range(0, len(hour)):
                if hour_group_user_last_hour[i] == hour[y]:
                    hour_user_items.append(hour.index(hour[y]))
        hour_group_user_last_hour = []
        for i in range(0, len(hour_user_items)):
            hour_group_user_last_hour.append(time_end_lesson[hour_user_items[i]])
        # begin_user
        hour_user_items = []
        for i in range(0, len(hour_group_user_first_hour)):
            for y in range(0, len(hour)):
                if hour_group_user_first_hour[i] == hour[y]:
                    hour_user_items.append(hour.index(hour[y]))
        hour_group_user_first_hour = []
        for i in range(0, len(hour_user_items)):
            hour_group_user_first_hour.append(time_begin_lesson[hour_user_items[i]])
        hour_user_items = []
        # last_friend
        for i in range(0, len(hour_group_friend_last_hour)):
            for y in range(0, len(hour)):
                if hour_group_friend_last_hour[i] == hour[y]:
                    hour_user_items.append(hour.index(hour[y]))
        hour_group_friend_last_hour = []
        for i in range(0, len(hour_user_items)):
            hour_group_friend_last_hour.append(time_end_lesson[hour_user_items[i]])
        # begin_friend
        hour_user_items = []
        for i in range(0, len(hour_group_friend_first_hour)):
            for y in range(0, len(hour)):
                if hour_group_friend_first_hour[i] == hour[y]:
                    hour_user_items.append(hour.index(hour[y]))
        hour_group_friend_first_hour = []
        for i in range(0, len(hour_user_items)):
            hour_group_friend_first_hour.append(time_begin_lesson[hour_user_items[i]])
        if len(hour_group_user_last_hour) == 0 and len(hour_group_friend_last_hour) > 0:
            bot.send_message(message.chat.id, f'–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –Ω–µ —É–π–¥–µ—Ç–µ –≤–º–µ—Å—Ç–µ, —Ç—ã –Ω–µ —É—á–∏—à—å—Å—è –≤ —ç—Ç–æ—Ç –¥–µ–Ω—å,'
                                              f' –∞ —Ç–≤–æ–π –¥—Ä—É–≥ –∑–∞–∫–æ–Ω—á–∏—Ç –≤ '
                                              f'<b><u>{hour_group_friend_last_hour[-1]}</u></b>.\n'
                                              f'–ù–µ –≥—Ä—É—Å—Ç–∏—Ç–µ, –º–æ–∂–µ—Ç –≤ –¥—Ä—É–≥–æ–π —Ä–∞–∑üòé', parse_mode='html')
            bot.send_photo(message.chat.id, photo=open('C:/Users/Anastasia/Desktop/algorithm-master/sed.jpg', 'rb'), reply_markup=murkup_quit_home_menu)  ########
        elif len(hour_group_friend_last_hour) == 0 and len(hour_group_user_last_hour) == 0:
            bot.send_message(message.chat.id, f'–°–µ–≥–æ–¥–Ω—è –Ω–∏ —Ç—ã, –Ω–∏ —Ç–≤–æ–π –¥—Ä—É–≥ –Ω–µ —É—á–∏—Ç–µ—Å—å!\n'
                                              f'üéâüéâüéâüéâüéâ', parse_mode='html',
                             reply_markup=murkup_quit_home_menu)
        elif len(hour_group_friend_last_hour) == 0 and len(hour_group_user_last_hour) > 0:
            bot.send_message(message.chat.id, f'–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –Ω–µ —É–π–¥–µ—Ç–µ –≤–º–µ—Å—Ç–µ, —Ç—ã –∑–∞–∫–æ–Ω—á–∏—à—å –≤ '
                                              f'<b><u>{hour_group_user_last_hour[-1]}</u></b>,'
                                              f' –∞ —Ç–≤–æ–π –¥—Ä—É–≥ —Å–µ–≥–æ–¥–Ω—è –Ω–µ —É—á–∏—Ç—Å—è.\n'
                                              f'–ù–µ –≥—Ä—É—Å—Ç–∏—Ç–µ, –º–æ–∂–µ—Ç –≤ –¥—Ä—É–≥–æ–π —Ä–∞–∑üòé', parse_mode='html')
            bot.send_photo(message.chat.id, photo=open('C:/Users/Anastasia/Desktop/algorithm-master/sed.jpg', 'rb'), reply_markup=murkup_quit_home_menu)  ########
        elif len(hour_group_friend_last_hour) > 0 and len(hour_group_user_last_hour) > 0:
            if hour_group_user_last_hour[-1] == hour_group_friend_last_hour[-1]:
                if hour_group_user_first_hour[0] == hour_group_friend_first_hour[0]:
                    bot.send_message(message.chat.id, f'–î–∞, –≤—ã —Å–º–æ–∂–µ—Ç–µ —É–π—Ç–∏ –≤–º–µ—Å—Ç–µ —Å –¥—Ä—É–≥–æ–º. –ù–æ –∏ –ø–æ–π—Ç–∏ –Ω–∞'
                                                      f' —É—Ä–æ–∫–∏ –≤—ã —Å–º–æ–∂–µ—Ç–µ –≤–º–µ—Å—Ç–µ, –≤–µ–¥—å –Ω–∞—á–Ω–µ—Ç–µ –≤ '
                                                      f'<b><u>{hour_group_friend_first_hour[0]}</u></b>, –∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ –≤ '
                                                      f'<b><u>{hour_group_friend_last_hour[-1]}</u></b>üòé',
                                     parse_mode='html')
                    bot.send_photo(message.chat.id, photo=open('C:/Users/Anastasia/Desktop/algorithm-master/happy.jpg', 'rb'), reply_markup=murkup_quit_home_menu)  ########
                else:
                    bot.send_message(message.chat.id, f'–î–∞, –≤—ã —Å–º–æ–∂–µ—Ç–µ —É–π—Ç–∏ –≤–º–µ—Å—Ç–µ —Å –¥—Ä—É–≥–æ–º. –ù–æ –ø–æ–π—Ç–∏ –Ω–∞'
                                                      f' —É—Ä–æ–∫–∏ –≤–º–µ—Å—Ç–µ –Ω–µ —Å–º–æ–∂–µ—Ç–µ. –í—ã –∑–∞–∫–æ–Ω—á–∏—Ç–µ –≤'
                                                      f' <b><u>{hour_group_friend_last_hour[-1]}</u></b>üòé',
                                     parse_mode='html')
                    bot.send_photo(message.chat.id, photo=open('C:/Users/Anastasia/Desktop/algorithm-master/happy.jpg', 'rb'), reply_markup=murkup_quit_home_menu)  ########
            else:
                if hour_group_user_first_hour[0] == hour_group_friend_first_hour[0]:
                    bot.send_message(message.chat.id,
                                     f'–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –Ω–µ —Å–º–æ–∂–µ—Ç–µ —É–π—Ç–∏ –≤–º–µ—Å—Ç–µ —Å –¥—Ä—É–≥–æ–º.'
                                     f' –ù–æ –ø–æ–π—Ç–∏ –Ω–∞ —É—Ä–æ–∫–∏ –≤–º–µ—Å—Ç–µ –º–æ–∂–µ—Ç–µ, –≤–µ–¥—å –Ω–∞—á–∏–Ω–∞–µ—Ç–µ –≤—ã –≤ '
                                     f'<b><u>{hour_group_friend_first_hour[0]}</u></b>üòé',
                                     parse_mode='html')
                    bot.send_photo(message.chat.id, photo=open('C:/Users/Anastasia/Desktop/algorithm-master/sed.jpg', 'rb'), reply_markup=murkup_quit_home_menu)  ########
                else:
                    bot.send_message(message.chat.id, f'–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –Ω–µ —Å–º–æ–∂–µ—Ç–µ —É–π—Ç–∏ –≤–º–µ—Å—Ç–µ –∏ –ø–æ–π—Ç–∏ –≤–º–µ—Å—Ç–µ —Å –¥—Ä—É–≥–æ–º.',
                                     parse_mode='html')
                    bot.send_photo(message.chat.id, photo=open('C:/Users/Anastasia/Desktop/algorithm-master/sed.jpg', 'rb'), reply_markup=murkup_quit_home_menu)  ########
    elif message.text == '–°—Ä-1':
        hour_group_user_last_hour = []
        hour_group_friend_last_hour = []
        hour_group_user_first_hour = []
        hour_group_friend_first_hour = []
        hour_group_user_last_hour = times_db('–°–†–ï–î–ê', '1', message.from_user.id)
        hour_group_friend_last_hour = times_db_friend('–°–†–ï–î–ê', '1', name_group)
        hour_group_user_first_hour = times_db_first('–°–†–ï–î–ê', '1', message.from_user.id)
        hour_group_friend_first_hour = times_db_friend_first('–°–†–ï–î–ê', '1', name_group)
        murkup_quit_home_menu = types.ReplyKeyboardMarkup(resize_keyboard=True)
        quit_menu = types.KeyboardButton('–ú–µ–Ω—é')
        murkup_quit_home_menu.add(quit_menu)
        hour_user_items = []
        time_begin_lesson = ['8:30', '10:10', '11:50', '13:40', '15:20', '17:00']
        time_end_lesson = ['10:00', '11:40', '13:20', '15:10', '16:50', '18:30']
        hour = ['1-2', '3-4', '5-6', '7-8', '9-10', '11-12']
        # last_user
        for i in range(0, len(hour_group_user_last_hour)):
            for y in range(0, len(hour)):
                if hour_group_user_last_hour[i] == hour[y]:
                    hour_user_items.append(hour.index(hour[y]))
        hour_group_user_last_hour = []
        for i in range(0, len(hour_user_items)):
            hour_group_user_last_hour.append(time_end_lesson[hour_user_items[i]])
        # begin_user
        hour_user_items = []
        for i in range(0, len(hour_group_user_first_hour)):
            for y in range(0, len(hour)):
                if hour_group_user_first_hour[i] == hour[y]:
                    hour_user_items.append(hour.index(hour[y]))
        hour_group_user_first_hour = []
        for i in range(0, len(hour_user_items)):
            hour_group_user_first_hour.append(time_begin_lesson[hour_user_items[i]])
        hour_user_items = []
        # last_friend
        for i in range(0, len(hour_group_friend_last_hour)):
            for y in range(0, len(hour)):
                if hour_group_friend_last_hour[i] == hour[y]:
                    hour_user_items.append(hour.index(hour[y]))
        hour_group_friend_last_hour = []
        for i in range(0, len(hour_user_items)):
            hour_group_friend_last_hour.append(time_end_lesson[hour_user_items[i]])
        # begin_friend
        hour_user_items = []
        for i in range(0, len(hour_group_friend_first_hour)):
            for y in range(0, len(hour)):
                if hour_group_friend_first_hour[i] == hour[y]:
                    hour_user_items.append(hour.index(hour[y]))
        hour_group_friend_first_hour = []
        for i in range(0, len(hour_user_items)):
            hour_group_friend_first_hour.append(time_begin_lesson[hour_user_items[i]])
        if len(hour_group_user_last_hour) == 0 and len(hour_group_friend_last_hour) > 0:
            bot.send_message(message.chat.id, f'–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –Ω–µ —É–π–¥–µ—Ç–µ –≤–º–µ—Å—Ç–µ, —Ç—ã –Ω–µ —É—á–∏—à—å—Å—è –≤ —ç—Ç–æ—Ç –¥–µ–Ω—å,'
                                              f' –∞ —Ç–≤–æ–π –¥—Ä—É–≥ –∑–∞–∫–æ–Ω—á–∏—Ç –≤ '
                                              f'<b><u>{hour_group_friend_last_hour[-1]}</u></b>.\n'
                                              f'–ù–µ –≥—Ä—É—Å—Ç–∏—Ç–µ, –º–æ–∂–µ—Ç –≤ –¥—Ä—É–≥–æ–π —Ä–∞–∑üòé', parse_mode='html')
            bot.send_photo(message.chat.id, photo=open('C:/Users/Anastasia/Desktop/algorithm-master/sed.jpg', 'rb'), reply_markup=murkup_quit_home_menu)  ########
        elif len(hour_group_friend_last_hour) == 0 and len(hour_group_user_last_hour) == 0:
            bot.send_message(message.chat.id, f'–°–µ–≥–æ–¥–Ω—è –Ω–∏ —Ç—ã, –Ω–∏ —Ç–≤–æ–π –¥—Ä—É–≥ –Ω–µ —É—á–∏—Ç–µ—Å—å!\n'
                                              f'üéâüéâüéâüéâüéâ', parse_mode='html',
                             reply_markup=murkup_quit_home_menu)
        elif len(hour_group_friend_last_hour) == 0 and len(hour_group_user_last_hour) > 0:
            bot.send_message(message.chat.id, f'–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –Ω–µ —É–π–¥–µ—Ç–µ –≤–º–µ—Å—Ç–µ, —Ç—ã –∑–∞–∫–æ–Ω—á–∏—à—å –≤ '
                                              f'<b><u>{hour_group_user_last_hour[-1]}</u></b>,'
                                              f' –∞ —Ç–≤–æ–π –¥—Ä—É–≥ —Å–µ–≥–æ–¥–Ω—è –Ω–µ —É—á–∏—Ç—Å—è.\n'
                                              f'–ù–µ –≥—Ä—É—Å—Ç–∏—Ç–µ, –º–æ–∂–µ—Ç –≤ –¥—Ä—É–≥–æ–π —Ä–∞–∑üòé', parse_mode='html')
            bot.send_photo(message.chat.id, photo=open('C:/Users/Anastasia/Desktop/algorithm-master/sed.jpg', 'rb'), reply_markup=murkup_quit_home_menu)  ########
        elif len(hour_group_friend_last_hour) > 0 and len(hour_group_user_last_hour) > 0:
            if hour_group_user_last_hour[-1] == hour_group_friend_last_hour[-1]:
                if hour_group_user_first_hour[0] == hour_group_friend_first_hour[0]:
                    bot.send_message(message.chat.id, f'–î–∞, –≤—ã —Å–º–æ–∂–µ—Ç–µ —É–π—Ç–∏ –≤–º–µ—Å—Ç–µ —Å –¥—Ä—É–≥–æ–º. –ù–æ –∏ –ø–æ–π—Ç–∏ –Ω–∞'
                                                      f' —É—Ä–æ–∫–∏, –≤—ã —Å–º–æ–∂–µ—Ç–µ –≤–º–µ—Å—Ç–µ, –≤–µ–¥—å –Ω–∞—á–∏–Ω–∞–µ—Ç–µ –≤—ã –≤ '
                                                      f'<b><u>{hour_group_friend_first_hour[0]}</u></b>, –∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ –≤ '
                                                      f'<b><u>{hour_group_friend_last_hour[-1]}</u></b>üòé',
                                     parse_mode='html')
                    bot.send_photo(message.chat.id, photo=open('C:/Users/Anastasia/Desktop/algorithm-master/happy.jpg', 'rb'), reply_markup=murkup_quit_home_menu)  ########
                else:
                    bot.send_message(message.chat.id, f'–î–∞, –≤—ã —Å–º–æ–∂–µ—Ç–µ —É–π—Ç–∏ –≤–º–µ—Å—Ç–µ —Å –¥—Ä—É–≥–æ–º. –ù–æ –ø–æ–π—Ç–∏ –Ω–∞'
                                                      f' —É—Ä–æ–∫–∏ –≤–º–µ—Å—Ç–µ –Ω–µ —Å–º–æ–∂–µ—Ç–µ. –í—ã –∑–∞–∫–æ–Ω—á–∏—Ç–µ –≤'
                                                      f' <b><u>{hour_group_friend_last_hour[-1]}</u></b>üòé',
                                     parse_mode='html')
                    bot.send_photo(message.chat.id, photo=open('C:/Users/Anastasia/Desktop/algorithm-master/happy.jpg', 'rb'), reply_markup=murkup_quit_home_menu)  ########
            else:
                if hour_group_user_first_hour[0] == hour_group_friend_first_hour[0]:
                    bot.send_message(message.chat.id,
                                     f'–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –Ω–µ —Å–º–æ–∂–µ—Ç–µ —É–π—Ç–∏ –≤–º–µ—Å—Ç–µ —Å –¥—Ä—É–≥–æ–º.'
                                     f' –ù–æ –ø–æ–π—Ç–∏ –Ω–∞ —É—Ä–æ–∫–∏ –≤–º–µ—Å—Ç–µ –º–æ–∂–µ—Ç–µ, –≤–µ–¥—å –Ω–∞—á–∏–Ω–∞–µ—Ç–µ –≤—ã –≤ '
                                     f'<b><u>{hour_group_friend_first_hour[0]}</u></b>üòé',
                                     parse_mode='html')
                    bot.send_photo(message.chat.id, photo=open('C:/Users/Anastasia/Desktop/algorithm-master/sed.jpg', 'rb'), reply_markup=murkup_quit_home_menu)  ########
                else:
                    bot.send_message(message.chat.id, f'–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –Ω–µ —Å–º–æ–∂–µ—Ç–µ —É–π—Ç–∏ –≤–º–µ—Å—Ç–µ –∏ –ø–æ–π—Ç–∏ –≤–º–µ—Å—Ç–µ —Å –¥—Ä—É–≥–æ–º.',
                                     parse_mode='html')
                    bot.send_photo(message.chat.id, photo=open('C:/Users/Anastasia/Desktop/algorithm-master/sed.jpg', 'rb'), reply_markup=murkup_quit_home_menu)  ########
    elif message.text == '–ß—Ç-1':
        hour_group_user_last_hour = []
        hour_group_friend_last_hour = []
        hour_group_user_first_hour = []
        hour_group_friend_first_hour = []
        hour_group_user_last_hour = times_db('–ß–ï–¢–í–ï–†–ì', '1', message.from_user.id)
        hour_group_friend_last_hour = times_db_friend('–ß–ï–¢–í–ï–†–ì', '1', name_group)
        hour_group_user_first_hour = times_db_first('–ß–ï–¢–í–ï–†–ì', '1', message.from_user.id)
        hour_group_friend_first_hour = times_db_friend_first('–ß–ï–¢–í–ï–†–ì', '1', name_group)
        murkup_quit_home_menu = types.ReplyKeyboardMarkup(resize_keyboard=True)
        quit_menu = types.KeyboardButton('–ú–µ–Ω—é')
        murkup_quit_home_menu.add(quit_menu)
        hour_user_items = []
        time_begin_lesson = ['8:30', '10:10', '11:50', '13:40', '15:20', '17:00']
        time_end_lesson = ['10:00', '11:40', '13:20', '15:10', '16:50', '18:30']
        hour = ['1-2', '3-4', '5-6', '7-8', '9-10', '11-12']
        # last_user
        for i in range(0, len(hour_group_user_last_hour)):
            for y in range(0, len(hour)):
                if hour_group_user_last_hour[i] == hour[y]:
                    hour_user_items.append(hour.index(hour[y]))
        hour_group_user_last_hour = []
        for i in range(0, len(hour_user_items)):
            hour_group_user_last_hour.append(time_end_lesson[hour_user_items[i]])
        # begin_user
        hour_user_items = []
        for i in range(0, len(hour_group_user_first_hour)):
            for y in range(0, len(hour)):
                if hour_group_user_first_hour[i] == hour[y]:
                    hour_user_items.append(hour.index(hour[y]))
        hour_group_user_first_hour = []
        for i in range(0, len(hour_user_items)):
            hour_group_user_first_hour.append(time_begin_lesson[hour_user_items[i]])
        hour_user_items = []
        # last_friend
        for i in range(0, len(hour_group_friend_last_hour)):
            for y in range(0, len(hour)):
                if hour_group_friend_last_hour[i] == hour[y]:
                    hour_user_items.append(hour.index(hour[y]))
        hour_group_friend_last_hour = []
        for i in range(0, len(hour_user_items)):
            hour_group_friend_last_hour.append(time_end_lesson[hour_user_items[i]])
        # begin_friend
        hour_user_items = []
        for i in range(0, len(hour_group_friend_first_hour)):
            for y in range(0, len(hour)):
                if hour_group_friend_first_hour[i] == hour[y]:
                    hour_user_items.append(hour.index(hour[y]))
        hour_group_friend_first_hour = []
        for i in range(0, len(hour_user_items)):
            hour_group_friend_first_hour.append(time_begin_lesson[hour_user_items[i]])
        if len(hour_group_user_last_hour) == 0 and len(hour_group_friend_last_hour) > 0:
            bot.send_message(message.chat.id, f'–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –Ω–µ —É–π–¥–µ—Ç–µ –≤–º–µ—Å—Ç–µ, —Ç—ã –Ω–µ —É—á–∏—à—å—Å—è –≤ —ç—Ç–æ—Ç –¥–µ–Ω—å,'
                                              f' –∞ —Ç–≤–æ–π –¥—Ä—É–≥ –∑–∞–∫–æ–Ω—á–∏—Ç –≤ '
                                              f'<b><u>{hour_group_friend_last_hour[-1]}</u></b>.\n'
                                              f'–ù–µ –≥—Ä—É—Å—Ç–∏—Ç–µ, –º–æ–∂–µ—Ç –≤ –¥—Ä—É–≥–æ–π —Ä–∞–∑üòé', parse_mode='html')
            bot.send_photo(message.chat.id, photo=open('C:/Users/Anastasia/Desktop/algorithm-master/sed.jpg', 'rb'), reply_markup=murkup_quit_home_menu)  ########
        elif len(hour_group_friend_last_hour) == 0 and len(hour_group_user_last_hour) == 0:
            bot.send_message(message.chat.id, f'–°–µ–≥–æ–¥–Ω—è –Ω–∏ —Ç—ã, –Ω–∏ —Ç–≤–æ–π –¥—Ä—É–≥ –Ω–µ —É—á–∏—Ç–µ—Å—å!\n'
                                              f'üéâüéâüéâüéâüéâ', parse_mode='html',
                             reply_markup=murkup_quit_home_menu)
        elif len(hour_group_friend_last_hour) == 0 and len(hour_group_user_last_hour) > 0:
            bot.send_message(message.chat.id, f'–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –Ω–µ —É–π–¥–µ—Ç–µ –≤–º–µ—Å—Ç–µ, —Ç—ã –∑–∞–∫–æ–Ω—á–∏—à—å –≤ '
                                              f'<b><u>{hour_group_user_last_hour[-1]}</u></b>,'
                                              f' –∞ —Ç–≤–æ–π –¥—Ä—É–≥ —Å–µ–≥–æ–¥–Ω—è –Ω–µ —É—á–∏—Ç—Å—è.\n'
                                              f'–ù–µ –≥—Ä—É—Å—Ç–∏—Ç–µ, –º–æ–∂–µ—Ç –≤ –¥—Ä—É–≥–æ–π —Ä–∞–∑üòé', parse_mode='html')
            bot.send_photo(message.chat.id, photo=open('C:/Users/Anastasia/Desktop/algorithm-master/sed.jpg', 'rb'), reply_markup=murkup_quit_home_menu)  ########
        elif len(hour_group_friend_last_hour) > 0 and len(hour_group_user_last_hour) > 0:
            if hour_group_user_last_hour[-1] == hour_group_friend_last_hour[-1]:
                if hour_group_user_first_hour[0] == hour_group_friend_first_hour[0]:
                    bot.send_message(message.chat.id, f'–î–∞, –≤—ã —Å–º–æ–∂–µ—Ç–µ —É–π—Ç–∏ –≤–º–µ—Å—Ç–µ —Å –¥—Ä—É–≥–æ–º. –ù–æ –∏ –ø–æ–π—Ç–∏ –Ω–∞'
                                                      f' —É—Ä–æ–∫–∏ –≤—ã —Å–º–æ–∂–µ—Ç–µ –≤–º–µ—Å—Ç–µ, –≤–µ–¥—å –Ω–∞—á–∏–Ω–∞–µ—Ç–µ –≤—ã –≤ '
                                                      f'<b><u>{hour_group_friend_first_hour[0]}</u></b>, –∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ –≤ '
                                                      f'<b><u>{hour_group_friend_last_hour[-1]}</u></b>üòé',
                                     parse_mode='html')
                    bot.send_photo(message.chat.id, photo=open('C:/Users/Anastasia/Desktop/algorithm-master/happy.jpg', 'rb'), reply_markup=murkup_quit_home_menu)  ########
                else:
                    bot.send_message(message.chat.id, f'–î–∞, –≤—ã —Å–º–æ–∂–µ—Ç–µ —É–π—Ç–∏ –≤–º–µ—Å—Ç–µ —Å –¥—Ä—É–≥–æ–º. –ù–æ –ø–æ–π—Ç–∏ –Ω–∞'
                                                      f' —É—Ä–æ–∫–∏ –≤–º–µ—Å—Ç–µ –Ω–µ —Å–º–æ–∂–µ—Ç–µ. –í—ã –∑–∞–∫–æ–Ω—á–∏—Ç–µ –≤'
                                                      f' <b><u>{hour_group_friend_last_hour[-1]}</u></b>üòé',
                                     parse_mode='html')
                    bot.send_photo(message.chat.id, photo=open('C:/Users/Anastasia/Desktop/algorithm-master/happy.jpg', 'rb'), reply_markup=murkup_quit_home_menu)  ########
            else:
                if hour_group_user_first_hour[0] == hour_group_friend_first_hour[0]:
                    bot.send_message(message.chat.id,
                                     f'–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –Ω–µ —Å–º–æ–∂–µ—Ç–µ —É–π—Ç–∏ –≤–º–µ—Å—Ç–µ —Å –¥—Ä—É–≥–æ–º.'
                                     f' –ù–æ –ø–æ–π—Ç–∏ –Ω–∞ —É—Ä–æ–∫–∏ –≤–º–µ—Å—Ç–µ –º–æ–∂–µ—Ç–µ, –≤–µ–¥—å –Ω–∞—á–∏–Ω–∞–µ—Ç–µ –≤—ã –≤ '
                                     f'<b><u>{hour_group_friend_first_hour[0]}</u></b>üòé',
                                     parse_mode='html')
                    bot.send_photo(message.chat.id, photo=open('C:/Users/Anastasia/Desktop/algorithm-master/sed.jpg', 'rb'), reply_markup=murkup_quit_home_menu)  ########
                else:
                    bot.send_message(message.chat.id, f'–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –Ω–µ —Å–º–æ–∂–µ—Ç–µ —É–π—Ç–∏ –≤–º–µ—Å—Ç–µ –∏ –ø–æ–π—Ç–∏ –≤–º–µ—Å—Ç–µ —Å –¥—Ä—É–≥–æ–º.',
                                     parse_mode='html')
                    bot.send_photo(message.chat.id, photo=open('C:/Users/Anastasia/Desktop/algorithm-master/sed.jpg', 'rb'), reply_markup=murkup_quit_home_menu)  ########
    elif message.text == '–ü—Ç-1':
        hour_group_user_last_hour = []
        hour_group_friend_last_hour = []
        hour_group_user_first_hour = []
        hour_group_friend_first_hour = []
        hour_group_user_last_hour = times_db('–ü–Ø–¢–ù–ò–¶–ê', '1', message.from_user.id)
        hour_group_friend_last_hour = times_db_friend('–ü–Ø–¢–ù–ò–¶–ê', '1', name_group)
        hour_group_user_first_hour = times_db_first('–ü–Ø–¢–ù–ò–¶–ê', '1', message.from_user.id)
        hour_group_friend_first_hour = times_db_friend_first('–ü–Ø–¢–ù–ò–¶–ê', '1', name_group)
        murkup_quit_home_menu = types.ReplyKeyboardMarkup(resize_keyboard=True)
        quit_menu = types.KeyboardButton('–ú–µ–Ω—é')
        murkup_quit_home_menu.add(quit_menu)
        hour_user_items = []
        time_begin_lesson = ['8:30', '10:10', '11:50', '13:40', '15:20', '17:00']
        time_end_lesson = ['10:00', '11:40', '13:20', '15:10', '16:50', '18:30']
        hour = ['1-2', '3-4', '5-6', '7-8', '9-10', '11-12']
        # last_user
        for i in range(0, len(hour_group_user_last_hour)):
            for y in range(0, len(hour)):
                if hour_group_user_last_hour[i] == hour[y]:
                    hour_user_items.append(hour.index(hour[y]))
        hour_group_user_last_hour = []
        for i in range(0, len(hour_user_items)):
            hour_group_user_last_hour.append(time_end_lesson[hour_user_items[i]])
        # begin_user
        hour_user_items = []
        for i in range(0, len(hour_group_user_first_hour)):
            for y in range(0, len(hour)):
                if hour_group_user_first_hour[i] == hour[y]:
                    hour_user_items.append(hour.index(hour[y]))
        hour_group_user_first_hour = []
        for i in range(0, len(hour_user_items)):
            hour_group_user_first_hour.append(time_begin_lesson[hour_user_items[i]])
        hour_user_items = []
        # last_friend
        for i in range(0, len(hour_group_friend_last_hour)):
            for y in range(0, len(hour)):
                if hour_group_friend_last_hour[i] == hour[y]:
                    hour_user_items.append(hour.index(hour[y]))
        hour_group_friend_last_hour = []
        for i in range(0, len(hour_user_items)):
            hour_group_friend_last_hour.append(time_end_lesson[hour_user_items[i]])
        # begin_friend
        hour_user_items = []
        for i in range(0, len(hour_group_friend_first_hour)):
            for y in range(0, len(hour)):
                if hour_group_friend_first_hour[i] == hour[y]:
                    hour_user_items.append(hour.index(hour[y]))
        hour_group_friend_first_hour = []
        for i in range(0, len(hour_user_items)):
            hour_group_friend_first_hour.append(time_begin_lesson[hour_user_items[i]])
        if len(hour_group_user_last_hour) == 0 and len(hour_group_friend_last_hour) > 0:
            bot.send_message(message.chat.id, f'–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –Ω–µ —É–π–¥–µ—Ç–µ –≤–º–µ—Å—Ç–µ, —Ç—ã –Ω–µ —É—á–∏—à—å—Å—è –≤ —ç—Ç–æ—Ç –¥–µ–Ω—å,'
                                              f' –∞ —Ç–≤–æ–π –¥—Ä—É–≥ –∑–∞–∫–æ–Ω—á–∏—Ç –≤ '
                                              f'<b><u>{hour_group_friend_last_hour[-1]}</u></b>.\n'
                                              f'–ù–µ –≥—Ä—É—Å—Ç–∏—Ç–µ, –º–æ–∂–µ—Ç –≤ –¥—Ä—É–≥–æ–π —Ä–∞–∑üòé', parse_mode='html')
            bot.send_photo(message.chat.id, photo=open('C:/Users/Anastasia/Desktop/algorithm-master/sed.jpg', 'rb'), reply_markup=murkup_quit_home_menu)  ########
        elif len(hour_group_friend_last_hour) == 0 and len(hour_group_user_last_hour) == 0:
            bot.send_message(message.chat.id, f'–°–µ–≥–æ–¥–Ω—è –Ω–∏ —Ç—ã, –Ω–∏ —Ç–≤–æ–π –¥—Ä—É–≥ –Ω–µ —É—á–∏—Ç–µ—Å—å!\n'
                                              f'üéâüéâüéâüéâüéâ', parse_mode='html',
                             reply_markup=murkup_quit_home_menu)
        elif len(hour_group_friend_last_hour) == 0 and len(hour_group_user_last_hour) > 0:
            bot.send_message(message.chat.id, f'–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –Ω–µ —É–π–¥–µ—Ç–µ –≤–º–µ—Å—Ç–µ, —Ç—ã –∑–∞–∫–æ–Ω—á–∏—à—å –≤ '
                                              f'<b><u>{hour_group_user_last_hour[-1]}</u></b>,'
                                              f' –∞ —Ç–≤–æ–π –¥—Ä—É–≥ —Å–µ–≥–æ–¥–Ω—è –Ω–µ —É—á–∏—Ç—Å—è.\n'
                                              f'–ù–µ –≥—Ä—É—Å—Ç–∏—Ç–µ, –º–æ–∂–µ—Ç –≤ –¥—Ä—É–≥–æ–π —Ä–∞–∑üòé', parse_mode='html')
            bot.send_photo(message.chat.id, photo=open('C:/Users/Anastasia/Desktop/algorithm-master/sed.jpg', 'rb'), reply_markup=murkup_quit_home_menu)  ########
        elif len(hour_group_friend_last_hour) > 0 and len(hour_group_user_last_hour) > 0:
            if hour_group_user_last_hour[-1] == hour_group_friend_last_hour[-1]:
                if hour_group_user_first_hour[0] == hour_group_friend_first_hour[0]:
                    bot.send_message(message.chat.id, f'–î–∞, –≤—ã —Å–º–æ–∂–µ—Ç–µ —É–π—Ç–∏ –≤–º–µ—Å—Ç–µ —Å –¥—Ä—É–≥–æ–º. –ù–æ –∏ –ø–æ–π—Ç–∏ –Ω–∞'
                                                      f' —É—Ä–æ–∫–∏ –≤—ã —Å–º–æ–∂–µ—Ç–µ –≤–º–µ—Å—Ç–µ, –≤–µ–¥—å –Ω–∞—á–∏–Ω–∞–µ—Ç–µ –≤ '
                                                      f'<b><u>{hour_group_friend_first_hour[0]}</u></b>, –∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ –≤ '
                                                      f'<b><u>{hour_group_friend_last_hour[-1]}</u></b>üòé',
                                     parse_mode='html')
                    bot.send_photo(message.chat.id, photo=open('C:/Users/Anastasia/Desktop/algorithm-master/happy.jpg', 'rb'), reply_markup=murkup_quit_home_menu)  ########
                else:
                    bot.send_message(message.chat.id, f'–î–∞, –≤—ã —Å–º–æ–∂–µ—Ç–µ —É–π—Ç–∏ –≤–º–µ—Å—Ç–µ —Å –¥—Ä—É–≥–æ–º. –ù–æ –ø–æ–π—Ç–∏ –Ω–∞'
                                                      f' —É—Ä–æ–∫–∏ –≤–º–µ—Å—Ç–µ –Ω–µ —Å–º–æ–∂–µ—Ç–µ. –í—ã –∑–∞–∫–æ–Ω—á–∏—Ç–µ –≤'
                                                      f' <b><u>{hour_group_friend_last_hour[-1]}</u></b>üòé',
                                     parse_mode='html')
                    bot.send_photo(message.chat.id, photo=open('C:/Users/Anastasia/Desktop/algorithm-master/happy.jpg', 'rb'), reply_markup=murkup_quit_home_menu)  ########
            else:
                if hour_group_user_first_hour[0] == hour_group_friend_first_hour[0]:
                    bot.send_message(message.chat.id,
                                     f'–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –Ω–µ —Å–º–æ–∂–µ—Ç–µ —É–π—Ç–∏ –≤–º–µ—Å—Ç–µ —Å –¥—Ä—É–≥–æ–º.'
                                     f' –ù–æ –ø–æ–π—Ç–∏ –Ω–∞ —É—Ä–æ–∫–∏ –≤–º–µ—Å—Ç–µ –º–æ–∂–µ—Ç–µ, –≤–µ–¥—å –Ω–∞—á–∏–Ω–∞–µ—Ç–µ –≤—ã –≤ '
                                     f'<b><u>{hour_group_friend_first_hour[0]}</u></b>üòé',
                                     parse_mode='html')
                    bot.send_photo(message.chat.id, photo=open('C:/Users/Anastasia/Desktop/algorithm-master/sed.jpg', 'rb'), reply_markup=murkup_quit_home_menu)  ########
                else:
                    bot.send_message(message.chat.id,
                                     f'–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –Ω–µ —Å–º–æ–∂–µ—Ç–µ —É–π—Ç–∏ –≤–º–µ—Å—Ç–µ –∏ –ø–æ–π—Ç–∏ –≤–º–µ—Å—Ç–µ —Å –¥—Ä—É–≥–æ–º.',
                                     parse_mode='html')
                    bot.send_photo(message.chat.id, photo=open('C:/Users/Anastasia/Desktop/algorithm-master/sed.jpg', 'rb'), reply_markup=murkup_quit_home_menu)  ########
    elif message.text == '–°–±-1':
        hour_group_user_last_hour = []
        hour_group_friend_last_hour = []
        hour_group_user_first_hour = []
        hour_group_friend_first_hour = []
        hour_group_user_last_hour = times_db('–°–£–ë–ë–û–¢–ê', '1', message.from_user.id)
        hour_group_friend_last_hour = times_db_friend('–°–£–ë–ë–û–¢–ê', '1', name_group)
        hour_group_user_first_hour = times_db_first('–°–£–ë–ë–û–¢–ê', '1', message.from_user.id)
        hour_group_friend_first_hour = times_db_friend_first('–°–£–ë–ë–û–¢–ê', '1', name_group)
        murkup_quit_home_menu = types.ReplyKeyboardMarkup(resize_keyboard=True)
        quit_menu = types.KeyboardButton('–ú–µ–Ω—é')
        murkup_quit_home_menu.add(quit_menu)
        hour_user_items = []
        time_begin_lesson = ['8:30', '10:10', '11:50', '13:40', '15:20', '17:00']
        time_end_lesson = ['10:00', '11:40', '13:20', '15:10', '16:50', '18:30']
        hour = ['1-2', '3-4', '5-6', '7-8', '9-10', '11-12']
        # last_user
        for i in range(0, len(hour_group_user_last_hour)):
            for y in range(0, len(hour)):
                if hour_group_user_last_hour[i] == hour[y]:
                    hour_user_items.append(hour.index(hour[y]))
        hour_group_user_last_hour = []
        for i in range(0, len(hour_user_items)):
            hour_group_user_last_hour.append(time_end_lesson[hour_user_items[i]])
        # begin_user
        hour_user_items = []
        for i in range(0, len(hour_group_user_first_hour)):
            for y in range(0, len(hour)):
                if hour_group_user_first_hour[i] == hour[y]:
                    hour_user_items.append(hour.index(hour[y]))
        hour_group_user_first_hour = []
        for i in range(0, len(hour_user_items)):
            hour_group_user_first_hour.append(time_begin_lesson[hour_user_items[i]])
        hour_user_items = []
        # last_friend
        for i in range(0, len(hour_group_friend_last_hour)):
            for y in range(0, len(hour)):
                if hour_group_friend_last_hour[i] == hour[y]:
                    hour_user_items.append(hour.index(hour[y]))
        hour_group_friend_last_hour = []
        for i in range(0, len(hour_user_items)):
            hour_group_friend_last_hour.append(time_end_lesson[hour_user_items[i]])
        # begin_friend
        hour_user_items = []
        for i in range(0, len(hour_group_friend_first_hour)):
            for y in range(0, len(hour)):
                if hour_group_friend_first_hour[i] == hour[y]:
                    hour_user_items.append(hour.index(hour[y]))
        hour_group_friend_first_hour = []
        for i in range(0, len(hour_user_items)):
            hour_group_friend_first_hour.append(time_begin_lesson[hour_user_items[i]])
        if len(hour_group_user_last_hour) == 0 and len(hour_group_friend_last_hour) > 0:
            bot.send_message(message.chat.id, f'–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –Ω–µ —É–π–¥–µ—Ç–µ –≤–º–µ—Å—Ç–µ, —Ç—ã –Ω–µ —É—á–∏—à—å—Å—è –≤ —ç—Ç–æ—Ç –¥–µ–Ω—å,'
                                              f' –∞ —Ç–≤–æ–π –¥—Ä—É–≥ –∑–∞–∫–æ–Ω—á–∏—Ç –≤ '
                                              f'<b><u>{hour_group_friend_last_hour[-1]}</u></b>.\n'
                                              f'–ù–µ –≥—Ä—É—Å—Ç–∏—Ç–µ, –º–æ–∂–µ—Ç –≤ –¥—Ä—É–≥–æ–π —Ä–∞–∑üòé', parse_mode='html')
            bot.send_photo(message.chat.id, photo=open('C:/Users/Anastasia/Desktop/algorithm-master/sed.jpg', 'rb'), reply_markup=murkup_quit_home_menu)  ########
        elif len(hour_group_friend_last_hour) == 0 and len(hour_group_user_last_hour) == 0:
            bot.send_message(message.chat.id, f'–°–µ–≥–æ–¥–Ω—è –Ω–∏ —Ç—ã, –Ω–∏ —Ç–≤–æ–π –¥—Ä—É–≥ –Ω–µ —É—á–∏—Ç–µ—Å—å!\n'
                                              f'üéâüéâüéâüéâüéâ', parse_mode='html',
                             reply_markup=murkup_quit_home_menu)
        elif len(hour_group_friend_last_hour) == 0 and len(hour_group_user_last_hour) > 0:
            bot.send_message(message.chat.id, f'–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –Ω–µ —É–π–¥–µ—Ç–µ –≤–º–µ—Å—Ç–µ, —Ç—ã –∑–∞–∫–æ–Ω—á–∏—à—å –≤ '
                                              f'<b><u>{hour_group_user_last_hour[-1]}</u></b>,'
                                              f' –∞ —Ç–≤–æ–π –¥—Ä—É–≥ —Å–µ–≥–æ–¥–Ω—è –Ω–µ —É—á–∏—Ç—Å—è.\n'
                                              f'–ù–µ –≥—Ä—É—Å—Ç–∏—Ç–µ, –º–æ–∂–µ—Ç –≤ –¥—Ä—É–≥–æ–π —Ä–∞–∑üòé', parse_mode='html')
            bot.send_photo(message.chat.id, photo=open('C:/Users/Anastasia/Desktop/algorithm-master/sed.jpg', 'rb'), reply_markup=murkup_quit_home_menu)  ########
        elif len(hour_group_friend_last_hour) > 0 and len(hour_group_user_last_hour) > 0:
            if hour_group_user_last_hour[-1] == hour_group_friend_last_hour[-1]:
                if hour_group_user_first_hour[0] == hour_group_friend_first_hour[0]:
                    bot.send_message(message.chat.id, f'–î–∞, –≤—ã —Å–º–æ–∂–µ—Ç–µ —É–π—Ç–∏ –≤–º–µ—Å—Ç–µ —Å –¥—Ä—É–≥–æ–º. –ù–æ –∏ –ø–æ–π—Ç–∏ –Ω–∞'
                                                      f' —É—Ä–æ–∫–∏ –≤—ã —Å–º–æ–∂–µ—Ç–µ –≤–º–µ—Å—Ç–µ, –≤–µ–¥—å –Ω–∞—á–∏–Ω–∞–µ—Ç–µ –≤—ã –≤ '
                                                      f'<b><u>{hour_group_friend_first_hour[0]}</u></b>, –∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ –≤ '
                                                      f'<b><u>{hour_group_friend_last_hour[-1]}</u></b>üòé',
                                     parse_mode='html')
                    bot.send_photo(message.chat.id, photo=open('C:/Users/Anastasia/Desktop/algorithm-master/happy.jpg', 'rb'), reply_markup=murkup_quit_home_menu)  ########
                else:
                    bot.send_message(message.chat.id, f'–î–∞, –≤—ã —Å–º–æ–∂–µ—Ç–µ —É–π—Ç–∏ –≤–º–µ—Å—Ç–µ —Å –¥—Ä—É–≥–æ–º. –ù–æ –ø–æ–π—Ç–∏ –Ω–∞'
                                                      f' —É—Ä–æ–∫–∏ –≤–º–µ—Å—Ç–µ –Ω–µ —Å–º–æ–∂–µ—Ç–µ. –í—ã –∑–∞–∫–æ–Ω—á–∏—Ç–µ –≤'
                                                      f' <b><u>{hour_group_friend_last_hour[-1]}</u></b>üòé',
                                     parse_mode='html')
                    bot.send_photo(message.chat.id, photo=open('C:/Users/Anastasia/Desktop/algorithm-master/happy.jpg', 'rb'), reply_markup=murkup_quit_home_menu)  ########
            else:
                if hour_group_user_first_hour[0] == hour_group_friend_first_hour[0]:
                    bot.send_message(message.chat.id,
                                     f'–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –Ω–µ —Å–º–æ–∂–µ—Ç–µ —É–π—Ç–∏ –≤–º–µ—Å—Ç–µ —Å –¥—Ä—É–≥–æ–º.'
                                     f' –ù–æ –ø–æ–π—Ç–∏ –Ω–∞ —É—Ä–æ–∫–∏ –≤–º–µ—Å—Ç–µ –º–æ–∂–µ—Ç–µ, –≤–µ–¥—å –Ω–∞—á–∏–Ω–∞–µ—Ç–µ –≤—ã –≤ '
                                     f'<b><u>{hour_group_friend_first_hour[0]}</u></b>üòé',
                                     parse_mode='html')
                    bot.send_photo(message.chat.id, photo=open('C:/Users/Anastasia/Desktop/algorithm-master/sed.jpg', 'rb'), reply_markup=murkup_quit_home_menu)  ########
                else:
                    bot.send_message(message.chat.id, f'–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –Ω–µ —Å–º–æ–∂–µ—Ç–µ —É–π—Ç–∏ –≤–º–µ—Å—Ç–µ –∏ –ø–æ–π—Ç–∏ –≤–º–µ—Å—Ç–µ —Å –¥—Ä—É–≥–æ–º.',
                                     parse_mode='html')
                    bot.send_photo(message.chat.id, photo=open('C:/Users/Anastasia/Desktop/algorithm-master/sed.jpg', 'rb'), reply_markup=murkup_quit_home_menu)  ########


    #–≤—Ç–æ—Ä–∞—è –ù–ï–î–ï–õ–Ø
    elif message.text == '–ü–Ω-2':
        hour_group_user_last_hour = []
        hour_group_friend_last_hour = []
        hour_group_user_first_hour = []
        hour_group_friend_first_hour = []
        hour_group_user_last_hour = times_db('–ü–û–ù–ï–î–ï–õ–¨–ù–ò–ö', '2', message.from_user.id)
        hour_group_friend_last_hour = times_db_friend('–ü–û–ù–ï–î–ï–õ–¨–ù–ò–ö', '2', name_group)
        hour_group_user_first_hour = times_db_first('–ü–û–ù–ï–î–ï–õ–¨–ù–ò–ö', '2', message.from_user.id)
        hour_group_friend_first_hour = times_db_friend_first('–ü–û–ù–ï–î–ï–õ–¨–ù–ò–ö', '2', name_group)
        murkup_quit_home_menu = types.ReplyKeyboardMarkup(resize_keyboard=True)
        quit_menu = types.KeyboardButton('–ú–µ–Ω—é')
        murkup_quit_home_menu.add(quit_menu)
        hour_user_items = []
        time_begin_lesson = ['8:30', '10:10', '11:50', '13:40', '15:20', '17:00']
        time_end_lesson = ['10:00', '11:40', '13:20', '15:10', '16:50', '18:30']
        hour = ['1-2', '3-4', '5-6', '7-8', '9-10', '11-12']
        # last_user
        for i in range(0, len(hour_group_user_last_hour)):
            for y in range(0, len(hour)):
                if hour_group_user_last_hour[i] == hour[y]:
                    hour_user_items.append(hour.index(hour[y]))
        hour_group_user_last_hour = []
        for i in range(0, len(hour_user_items)):
            hour_group_user_last_hour.append(time_end_lesson[hour_user_items[i]])
        # begin_user
        hour_user_items = []
        for i in range(0, len(hour_group_user_first_hour)):
            for y in range(0, len(hour)):
                if hour_group_user_first_hour[i] == hour[y]:
                    hour_user_items.append(hour.index(hour[y]))
        hour_group_user_first_hour = []
        for i in range(0, len(hour_user_items)):
            hour_group_user_first_hour.append(time_begin_lesson[hour_user_items[i]])
        hour_user_items = []
        # last_friend
        for i in range(0, len(hour_group_friend_last_hour)):
            for y in range(0, len(hour)):
                if hour_group_friend_last_hour[i] == hour[y]:
                    hour_user_items.append(hour.index(hour[y]))
        hour_group_friend_last_hour = []
        for i in range(0, len(hour_user_items)):
            hour_group_friend_last_hour.append(time_end_lesson[hour_user_items[i]])
        # begin_friend
        hour_user_items = []
        for i in range(0, len(hour_group_friend_first_hour)):
            for y in range(0, len(hour)):
                if hour_group_friend_first_hour[i] == hour[y]:
                    hour_user_items.append(hour.index(hour[y]))
        hour_group_friend_first_hour = []
        for i in range(0, len(hour_user_items)):
            hour_group_friend_first_hour.append(time_begin_lesson[hour_user_items[i]])
        if len(hour_group_user_last_hour) == 0 and len(hour_group_friend_last_hour) > 0:
            bot.send_message(message.chat.id, f'–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –Ω–µ —É–π–¥–µ—Ç–µ –≤–º–µ—Å—Ç–µ, —Ç—ã –Ω–µ —É—á–∏—à—å—Å—è –≤ —ç—Ç–æ—Ç –¥–µ–Ω—å,'
                                              f' –∞ —Ç–≤–æ–π –¥—Ä—É–≥ –∑–∞–∫–æ–Ω—á–∏—Ç –≤ '
                                              f'<b><u>{hour_group_friend_last_hour[-1]}</u></b>.\n'
                                              f'–ù–µ –≥—Ä—É—Å—Ç–∏—Ç–µ, –º–æ–∂–µ—Ç –≤ –¥—Ä—É–≥–æ–π —Ä–∞–∑üòé', parse_mode='html')
            bot.send_photo(message.chat.id, photo=open('C:/Users/Anastasia/Desktop/algorithm-master/sed.jpg', 'rb'), reply_markup=murkup_quit_home_menu)  ########
        elif len(hour_group_friend_last_hour) == 0 and len(hour_group_user_last_hour) == 0:
            bot.send_message(message.chat.id, f'–°–µ–≥–æ–¥–Ω—è –Ω–∏ —Ç—ã, –Ω–∏ —Ç–≤–æ–π –¥—Ä—É–≥ –Ω–µ —É—á–∏—Ç–µ—Å—å!\n'
                                              f'üéâüéâüéâüéâüéâ', parse_mode='html',
                             reply_markup=murkup_quit_home_menu)
        elif len(hour_group_friend_last_hour) == 0 and len(hour_group_user_last_hour) > 0:
            bot.send_message(message.chat.id, f'–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –Ω–µ —É–π–¥–µ—Ç–µ –≤–º–µ—Å—Ç–µ, —Ç—ã –∑–∞–∫–æ–Ω—á–∏—à—å –≤ '
                                              f'<b><u>{hour_group_user_last_hour[-1]}</u></b>,'
                                              f' –∞ —Ç–≤–æ–π –¥—Ä—É–≥ —Å–µ–≥–æ–¥–Ω—è –Ω–µ —É—á–∏—Ç—Å—è.\n'
                                              f'–ù–µ –≥—Ä—É—Å—Ç–∏—Ç–µ, –º–æ–∂–µ—Ç –≤ –¥—Ä—É–≥–æ–π —Ä–∞–∑üòé', parse_mode='html')
            bot.send_photo(message.chat.id, photo=open('C:/Users/Anastasia/Desktop/algorithm-master/sed.jpg', 'rb'), reply_markup=murkup_quit_home_menu)  ########
        elif len(hour_group_friend_last_hour) > 0 and len(hour_group_user_last_hour) > 0:
            if hour_group_user_last_hour[-1] == hour_group_friend_last_hour[-1]:
                if hour_group_user_first_hour[0] == hour_group_friend_first_hour[0]:
                    bot.send_message(message.chat.id, f'–î–∞, –≤—ã —Å–º–æ–∂–µ—Ç–µ —É–π—Ç–∏ –≤–º–µ—Å—Ç–µ —Å –¥—Ä—É–≥–æ–º. –ù–æ –∏ –ø–æ–π—Ç–∏ –Ω–∞'
                                                      f' —É—Ä–æ–∫–∏ –≤—ã —Å–º–æ–∂–µ—Ç–µ –≤–º–µ—Å—Ç–µ, –≤–µ–¥—å –Ω–∞—á–Ω–µ—Ç–µ –≤—ã –≤ '
                                                      f'<b><u>{hour_group_friend_first_hour[0]}</u></b>, –∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ –≤ '
                                                      f'<b><u>{hour_group_friend_last_hour[-1]}</u></b>üòé',
                                     parse_mode='html')
                    bot.send_photo(message.chat.id, photo=open('C:/Users/Anastasia/Desktop/algorithm-master/happy.jpg', 'rb'), reply_markup=murkup_quit_home_menu)  ########
                else:
                    bot.send_message(message.chat.id, f'–î–∞, –≤—ã —Å–º–æ–∂–µ—Ç–µ —É–π—Ç–∏ –≤–º–µ—Å—Ç–µ —Å –¥—Ä—É–≥–æ–º. –ù–æ –ø–æ–π—Ç–∏ –Ω–∞'
                                                      f' —É—Ä–æ–∫–∏ –≤–º–µ—Å—Ç–µ –Ω–µ —Å–º–æ–∂–µ—Ç–µ. –í—ã –∑–∞–∫–æ–Ω—á–∏—Ç–µ –≤'
                                                      f' <b><u>{hour_group_friend_last_hour[-1]}</u></b>',
                                     parse_mode='html')
                    bot.send_photo(message.chat.id, photo=open('C:/Users/Anastasia/Desktop/algorithm-master/happy.jpg', 'rb'), reply_markup=murkup_quit_home_menu)  ########
            else:
                if hour_group_user_first_hour[0] == hour_group_friend_first_hour[0]:
                    bot.send_message(message.chat.id,
                                     f'–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –Ω–µ —Å–º–æ–∂–µ—Ç–µ —É–π—Ç–∏ –≤–º–µ—Å—Ç–µ —Å –¥—Ä—É–≥–æ–º.'
                                     f' –ù–æ –ø–æ–π—Ç–∏ –Ω–∞ —É—Ä–æ–∫–∏ –≤–º–µ—Å—Ç–µ –º–æ–∂–µ—Ç–µ, –≤–µ–¥—å –Ω–∞—á–∏–Ω–∞–µ—Ç–µ –≤—ã –≤ '
                                     f'<b><u>{hour_group_friend_first_hour[0]}</u></b>üòé',
                                     parse_mode='html')
                    bot.send_photo(message.chat.id, photo=open('C:/Users/Anastasia/Desktop/algorithm-master/sed.jpg', 'rb'), reply_markup=murkup_quit_home_menu)  ########
                else:
                    bot.send_message(message.chat.id, f'–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –Ω–µ —Å–º–æ–∂–µ—Ç–µ —É–π—Ç–∏ –≤–º–µ—Å—Ç–µ –∏ –ø–æ–π—Ç–∏ –≤–º–µ—Å—Ç–µ —Å –¥—Ä—É–≥–æ–º.',
                                     parse_mode='html')
                    bot.send_photo(message.chat.id, photo=open('C:/Users/Anastasia/Desktop/algorithm-master/sed.jpg', 'rb'), reply_markup=murkup_quit_home_menu)  ########
    elif message.text == '–í—Ç-2':
        hour_group_user_last_hour = []
        hour_group_friend_last_hour = []
        hour_group_user_first_hour = []
        hour_group_friend_first_hour = []
        hour_group_user_last_hour = times_db('–í–¢–û–†–ù–ò–ö', '2', message.from_user.id)
        hour_group_friend_last_hour = times_db_friend('–í–¢–û–†–ù–ò–ö', '2', name_group)
        hour_group_user_first_hour = times_db_first('–í–¢–û–†–ù–ò–ö', '2', message.from_user.id)
        hour_group_friend_first_hour = times_db_friend_first('–í–¢–û–†–ù–ò–ö', '2', name_group)
        murkup_quit_home_menu = types.ReplyKeyboardMarkup(resize_keyboard=True)
        quit_menu = types.KeyboardButton('–ú–µ–Ω—é')
        murkup_quit_home_menu.add(quit_menu)
        hour_user_items = []
        time_begin_lesson = ['8:30', '10:10', '11:50', '13:40', '15:20', '17:00']
        time_end_lesson = ['10:00', '11:40', '13:20', '15:10', '16:50', '18:30']
        hour = ['1-2', '3-4', '5-6', '7-8', '9-10', '11-12']
        # last_user
        for i in range(0, len(hour_group_user_last_hour)):
            for y in range(0, len(hour)):
                if hour_group_user_last_hour[i] == hour[y]:
                    hour_user_items.append(hour.index(hour[y]))
        hour_group_user_last_hour = []
        for i in range(0, len(hour_user_items)):
            hour_group_user_last_hour.append(time_end_lesson[hour_user_items[i]])
        # begin_user
        hour_user_items = []
        for i in range(0, len(hour_group_user_first_hour)):
            for y in range(0, len(hour)):
                if hour_group_user_first_hour[i] == hour[y]:
                    hour_user_items.append(hour.index(hour[y]))
        hour_group_user_first_hour = []
        for i in range(0, len(hour_user_items)):
            hour_group_user_first_hour.append(time_begin_lesson[hour_user_items[i]])
        hour_user_items = []
        # last_friend
        for i in range(0, len(hour_group_friend_last_hour)):
            for y in range(0, len(hour)):
                if hour_group_friend_last_hour[i] == hour[y]:
                    hour_user_items.append(hour.index(hour[y]))
        hour_group_friend_last_hour = []
        for i in range(0, len(hour_user_items)):
            hour_group_friend_last_hour.append(time_end_lesson[hour_user_items[i]])
        # begin_friend
        hour_user_items = []
        for i in range(0, len(hour_group_friend_first_hour)):
            for y in range(0, len(hour)):
                if hour_group_friend_first_hour[i] == hour[y]:
                    hour_user_items.append(hour.index(hour[y]))
        hour_group_friend_first_hour = []
        for i in range(0, len(hour_user_items)):
            hour_group_friend_first_hour.append(time_begin_lesson[hour_user_items[i]])
        if len(hour_group_user_last_hour) == 0 and len(hour_group_friend_last_hour) > 0:
            bot.send_message(message.chat.id, f'–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –Ω–µ —É–π–¥–µ—Ç–µ –≤–º–µ—Å—Ç–µ, —Ç—ã –Ω–µ —É—á–∏—à—å—Å—è –≤ —ç—Ç–æ—Ç –¥–µ–Ω—å,'
                                              f' –∞ —Ç–≤–æ–π –¥—Ä—É–≥ –∑–∞–∫–æ–Ω—á–∏—Ç –≤ '
                                              f'<b><u>{hour_group_friend_last_hour[-1]}</u></b>.\n'
                                              f'–ù–µ –≥—Ä—É—Å—Ç–∏—Ç–µ, –º–æ–∂–µ—Ç –≤ –¥—Ä—É–≥–æ–π —Ä–∞–∑üòé', parse_mode='html')
            bot.send_photo(message.chat.id, photo=open('C:/Users/Anastasia/Desktop/algorithm-master/sed.jpg', 'rb'), reply_markup=murkup_quit_home_menu)  ########
        elif len(hour_group_friend_last_hour) == 0 and len(hour_group_user_last_hour) == 0:
            bot.send_message(message.chat.id, f'–°–µ–≥–æ–¥–Ω—è –Ω–∏ —Ç—ã, –Ω–∏ —Ç–≤–æ–π –¥—Ä—É–≥ –Ω–µ —É—á–∏—Ç–µ—Å—å!\n'
                                              f'üéâüéâüéâüéâüéâ', parse_mode='html',
                             reply_markup=murkup_quit_home_menu)
        elif len(hour_group_friend_last_hour) == 0 and len(hour_group_user_last_hour) > 0:
            bot.send_message(message.chat.id, f'–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –Ω–µ —É–π–¥–µ—Ç–µ –≤–º–µ—Å—Ç–µ, —Ç—ã –∑–∞–∫–æ–Ω—á–∏—à—å –≤ '
                                              f'<b><u>{hour_group_user_last_hour[-1]}</u></b>,'
                                              f' –∞ —Ç–≤–æ–π –¥—Ä—É–≥ —Å–µ–≥–æ–¥–Ω—è –Ω–µ —É—á–∏—Ç—Å—è.\n'
                                              f'–ù–µ –≥—Ä—É—Å—Ç–∏—Ç–µ, –º–æ–∂–µ—Ç –≤ –¥—Ä—É–≥–æ–π —Ä–∞–∑üòé', parse_mode='html')
            bot.send_photo(message.chat.id, photo=open('C:/Users/Anastasia/Desktop/algorithm-master/sed.jpg', 'rb'), reply_markup=murkup_quit_home_menu)  ########
        elif len(hour_group_friend_last_hour) > 0 and len(hour_group_user_last_hour) > 0:
            if hour_group_user_last_hour[-1] == hour_group_friend_last_hour[-1]:
                if hour_group_user_first_hour[0] == hour_group_friend_first_hour[0]:
                    bot.send_message(message.chat.id, f'–î–∞, –≤—ã —Å–º–æ–∂–µ—Ç–µ —É–π—Ç–∏ –≤–º–µ—Å—Ç–µ —Å –¥—Ä—É–≥–æ–º. –ù–æ –∏ –ø–æ–π—Ç–∏ –Ω–∞'
                                                      f' —É—Ä–æ–∫–∏ –≤—ã —Å–º–æ–∂–µ—Ç–µ –≤–º–µ—Å—Ç–µ, –≤–µ–¥—å –Ω–∞—á–∏–Ω–∞–µ—Ç–µ –≤—ã –≤ '
                                                      f'<b><u>{hour_group_friend_first_hour[0]}</u></b>, –∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ –≤ '
                                                      f'<b><u>{hour_group_friend_last_hour[-1]}</u></b>üòé',
                                     parse_mode='html')
                    bot.send_photo(message.chat.id, photo=open('C:/Users/Anastasia/Desktop/algorithm-master/happy.jpg', 'rb'), reply_markup=murkup_quit_home_menu)  ########
                else:
                    bot.send_message(message.chat.id, f'–î–∞, –≤—ã —Å–º–æ–∂–µ—Ç–µ —É–π—Ç–∏ –≤–º–µ—Å—Ç–µ —Å –¥—Ä—É–≥–æ–º. –ù–æ –ø–æ–π—Ç–∏ –Ω–∞'
                                                      f' —É—Ä–æ–∫–∏ –≤–º–µ—Å—Ç–µ –Ω–µ —Å–º–æ–∂–µ—Ç–µ. –í—ã –∑–∞–∫–æ–Ω—á–∏—Ç–µ –≤'
                                                      f' <b><u>{hour_group_friend_last_hour[-1]}</u></b>üòé',
                                     parse_mode='html')
                    bot.send_photo(message.chat.id, photo=open('C:/Users/Anastasia/Desktop/algorithm-master/happy.jpg', 'rb'), reply_markup=murkup_quit_home_menu)  ########
            else:
                if hour_group_user_first_hour[0] == hour_group_friend_first_hour[0]:
                    bot.send_message(message.chat.id,
                                     f'–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –Ω–µ —Å–º–æ–∂–µ—Ç–µ —É–π—Ç–∏ –≤–º–µ—Å—Ç–µ —Å –¥—Ä—É–≥–æ–º.'
                                     f' –ù–æ –ø–æ–π—Ç–∏ –Ω–∞ —É—Ä–æ–∫–∏ –≤–º–µ—Å—Ç–µ –º–æ–∂–µ—Ç–µ, –≤–µ–¥—å –Ω–∞—á–∏–Ω–∞–µ—Ç–µ –≤—ã –≤ '
                                     f'<b><u>{hour_group_friend_first_hour[0]}</u></b>üòé',
                                     parse_mode='html')
                    bot.send_photo(message.chat.id, photo=open('C:/Users/Anastasia/Desktop/algorithm-master/sed.jpg', 'rb'), reply_markup=murkup_quit_home_menu)  ########
                else:
                    bot.send_message(message.chat.id, f'–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –Ω–µ —Å–º–æ–∂–µ—Ç–µ —É–π—Ç–∏ –≤–º–µ—Å—Ç–µ –∏ –ø–æ–π—Ç–∏ –≤–º–µ—Å—Ç–µ —Å –¥—Ä—É–≥–æ–º.',
                                     parse_mode='html')
                    bot.send_photo(message.chat.id, photo=open('C:/Users/Anastasia/Desktop/algorithm-master/sed.jpg', 'rb'), reply_markup=murkup_quit_home_menu)  ########
    elif message.text == '–°—Ä-2':
        hour_group_user_last_hour = []
        hour_group_friend_last_hour = []
        hour_group_user_first_hour = []
        hour_group_friend_first_hour = []
        hour_group_user_last_hour = times_db('–°–†–ï–î–ê', '2', message.from_user.id)
        hour_group_friend_last_hour = times_db_friend('–°–†–ï–î–ê', '2', name_group)
        hour_group_user_first_hour = times_db_first('–°–†–ï–î–ê', '2', message.from_user.id)
        hour_group_friend_first_hour = times_db_friend_first('–°–†–ï–î–ê', '2', name_group)
        murkup_quit_home_menu = types.ReplyKeyboardMarkup(resize_keyboard=True)
        quit_menu = types.KeyboardButton('–ú–µ–Ω—é')
        murkup_quit_home_menu.add(quit_menu)
        hour_user_items = []
        time_begin_lesson = ['8:30', '10:10', '11:50', '13:40', '15:20', '17:00']
        time_end_lesson = ['10:00', '11:40', '13:20', '15:10', '16:50', '18:30']
        hour = ['1-2', '3-4', '5-6', '7-8', '9-10', '11-12']
        # last_user
        for i in range(0, len(hour_group_user_last_hour)):
            for y in range(0, len(hour)):
                if hour_group_user_last_hour[i] == hour[y]:
                    hour_user_items.append(hour.index(hour[y]))
        hour_group_user_last_hour = []
        for i in range(0, len(hour_user_items)):
            hour_group_user_last_hour.append(time_end_lesson[hour_user_items[i]])
        # begin_user
        hour_user_items = []
        for i in range(0, len(hour_group_user_first_hour)):
            for y in range(0, len(hour)):
                if hour_group_user_first_hour[i] == hour[y]:
                    hour_user_items.append(hour.index(hour[y]))
        hour_group_user_first_hour = []
        for i in range(0, len(hour_user_items)):
            hour_group_user_first_hour.append(time_begin_lesson[hour_user_items[i]])
        hour_user_items = []
        # last_friend
        for i in range(0, len(hour_group_friend_last_hour)):
            for y in range(0, len(hour)):
                if hour_group_friend_last_hour[i] == hour[y]:
                    hour_user_items.append(hour.index(hour[y]))
        hour_group_friend_last_hour = []
        for i in range(0, len(hour_user_items)):
            hour_group_friend_last_hour.append(time_end_lesson[hour_user_items[i]])
        # begin_friend
        hour_user_items = []
        for i in range(0, len(hour_group_friend_first_hour)):
            for y in range(0, len(hour)):
                if hour_group_friend_first_hour[i] == hour[y]:
                    hour_user_items.append(hour.index(hour[y]))
        hour_group_friend_first_hour = []
        for i in range(0, len(hour_user_items)):
            hour_group_friend_first_hour.append(time_begin_lesson[hour_user_items[i]])
        if len(hour_group_user_last_hour) == 0 and len(hour_group_friend_last_hour) > 0:
            bot.send_message(message.chat.id, f'–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –Ω–µ —É–π–¥–µ—Ç–µ –≤–º–µ—Å—Ç–µ, —Ç—ã –Ω–µ —É—á–∏—à—å—Å—è –≤ —ç—Ç–æ—Ç –¥–µ–Ω—å,'
                                              f' –∞ —Ç–≤–æ–π –¥—Ä—É–≥ –∑–∞–∫–æ–Ω—á–∏—Ç –≤ '
                                              f'<b><u>{hour_group_friend_last_hour[-1]}</u></b>.\n'
                                              f'–ù–µ –≥—Ä—É—Å—Ç–∏—Ç–µ, –º–æ–∂–µ—Ç –≤ –¥—Ä—É–≥–æ–π —Ä–∞–∑üòé', parse_mode='html')
            bot.send_photo(message.chat.id, photo=open('C:/Users/Anastasia/Desktop/algorithm-master/sed.jpg', 'rb'), reply_markup=murkup_quit_home_menu)  ########
        elif len(hour_group_friend_last_hour) == 0 and len(hour_group_user_last_hour) == 0:
            bot.send_message(message.chat.id, f'–°–µ–≥–æ–¥–Ω—è –Ω–∏ —Ç—ã, –Ω–∏ —Ç–≤–æ–π –¥—Ä—É–≥ –Ω–µ —É—á–∏—Ç–µ—Å—å!\n'
                                              f'üéâüéâüéâüéâüéâ', parse_mode='html',
                             reply_markup=murkup_quit_home_menu)
        elif len(hour_group_friend_last_hour) == 0 and len(hour_group_user_last_hour) > 0:
            bot.send_message(message.chat.id, f'–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –Ω–µ —É–π–¥–µ—Ç–µ –≤–º–µ—Å—Ç–µ, —Ç—ã –∑–∞–∫–æ–Ω—á–∏—à—å –≤ '
                                              f'<b><u>{hour_group_user_last_hour[-1]}</u></b>,'
                                              f' –∞ —Ç–≤–æ–π –¥—Ä—É–≥ —Å–µ–≥–æ–¥–Ω—è –Ω–µ —É—á–∏—Ç—Å—è.\n'
                                              f'–ù–µ –≥—Ä—É—Å—Ç–∏—Ç–µ, –º–æ–∂–µ—Ç –≤ –¥—Ä—É–≥–æ–π —Ä–∞–∑üòé', parse_mode='html')
            bot.send_photo(message.chat.id, photo=open('C:/Users/Anastasia/Desktop/algorithm-master/sed.jpg', 'rb'), reply_markup=murkup_quit_home_menu)  ########
        elif len(hour_group_friend_last_hour) > 0 and len(hour_group_user_last_hour) > 0:
            if hour_group_user_last_hour[-1] == hour_group_friend_last_hour[-1]:
                if hour_group_user_first_hour[0] == hour_group_friend_first_hour[0]:
                    bot.send_message(message.chat.id, f'–î–∞, –≤—ã —Å–º–æ–∂–µ—Ç–µ —É–π—Ç–∏ –≤–º–µ—Å—Ç–µ —Å –¥—Ä—É–≥–æ–º. –ù–æ –∏ –ø–æ–π—Ç–∏ –Ω–∞'
                                                      f' —É—Ä–æ–∫–∏ –≤—ã —Å–º–æ–∂–µ—Ç–µ –≤–º–µ—Å—Ç–µ, –≤–µ–¥—å –Ω–∞—á–∏–Ω–∞–µ—Ç–µ –≤—ã –≤ '
                                                      f'<b><u>{hour_group_friend_first_hour[0]}</u></b>, –∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ –≤ '
                                                      f'<b><u>{hour_group_friend_last_hour[-1]}</u></b>üòé',
                                     parse_mode='html')
                    bot.send_photo(message.chat.id, photo=open('C:/Users/Anastasia/Desktop/algorithm-master/happy.jpg', 'rb'), reply_markup=murkup_quit_home_menu)  ########
                else:
                    bot.send_message(message.chat.id, f'–î–∞, –≤—ã —Å–º–æ–∂–µ—Ç–µ —É–π—Ç–∏ –≤–º–µ—Å—Ç–µ —Å –¥—Ä—É–≥–æ–º. –ù–æ –ø–æ–π—Ç–∏ –Ω–∞'
                                                      f' —É—Ä–æ–∫–∏ –≤–º–µ—Å—Ç–µ –Ω–µ —Å–º–æ–∂–µ—Ç–µ. –í—ã –∑–∞–∫–æ–Ω—á–∏—Ç–µ –≤'
                                                      f' <b><u>{hour_group_friend_last_hour[-1]}</u></b>üòé',
                                     parse_mode='html')
                    bot.send_photo(message.chat.id, photo=open('C:/Users/Anastasia/Desktop/algorithm-master/happy.jpg', 'rb'), reply_markup=murkup_quit_home_menu)  ########
            else:
                if hour_group_user_first_hour[0] == hour_group_friend_first_hour[0]:
                    bot.send_message(message.chat.id,
                                     f'–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –Ω–µ —Å–º–æ–∂–µ—Ç–µ —É–π—Ç–∏ –≤–º–µ—Å—Ç–µ —Å –¥—Ä—É–≥–æ–º.'
                                     f' –ù–æ –ø–æ–π—Ç–∏ –Ω–∞ —É—Ä–æ–∫–∏ –≤–º–µ—Å—Ç–µ –º–æ–∂–µ—Ç–µ, –≤–µ–¥—å –Ω–∞—á–∏–Ω–∞–µ—Ç–µ –≤—ã –≤ '
                                     f'<b><u>{hour_group_friend_first_hour[0]}</u></b>üòé',
                                     parse_mode='html')
                    bot.send_photo(message.chat.id, photo=open('C:/Users/Anastasia/Desktop/algorithm-master/sed.jpg', 'rb'), reply_markup=murkup_quit_home_menu)  ########
                else:
                    bot.send_message(message.chat.id, f'–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –Ω–µ —Å–º–æ–∂–µ—Ç–µ —É–π—Ç–∏ –≤–º–µ—Å—Ç–µ –∏ –ø–æ–π—Ç–∏ –≤–º–µ—Å—Ç–µ —Å –¥—Ä—É–≥–æ–º.',
                                     parse_mode='html')
                    bot.send_photo(message.chat.id, photo=open('C:/Users/Anastasia/Desktop/algorithm-master/sed.jpg', 'rb'), reply_markup=murkup_quit_home_menu)  ########
    elif message.text == '–ß—Ç-2':
        hour_group_user_last_hour = []
        hour_group_friend_last_hour = []
        hour_group_user_first_hour = []
        hour_group_friend_first_hour = []
        hour_group_user_last_hour = times_db('–ß–ï–¢–í–ï–†–ì', '2', message.from_user.id)
        hour_group_friend_last_hour = times_db_friend('–ß–ï–¢–í–ï–†–ì', '2', name_group)
        hour_group_user_first_hour = times_db_first('–ß–ï–¢–í–ï–†–ì', '2', message.from_user.id)
        hour_group_friend_first_hour = times_db_friend_first('–ß–ï–¢–í–ï–†–ì', '2', name_group)
        murkup_quit_home_menu = types.ReplyKeyboardMarkup(resize_keyboard=True)
        quit_menu = types.KeyboardButton('–ú–µ–Ω—é')
        murkup_quit_home_menu.add(quit_menu)
        hour_user_items = []
        time_begin_lesson = ['8:30', '10:10', '11:50', '13:40', '15:20', '17:00']
        time_end_lesson = ['10:00', '11:40', '13:20', '15:10', '16:50', '18:30']
        hour = ['1-2', '3-4', '5-6', '7-8', '9-10', '11-12']
        # last_user
        for i in range(0, len(hour_group_user_last_hour)):
            for y in range(0, len(hour)):
                if hour_group_user_last_hour[i] == hour[y]:
                    hour_user_items.append(hour.index(hour[y]))
        hour_group_user_last_hour = []
        for i in range(0, len(hour_user_items)):
            hour_group_user_last_hour.append(time_end_lesson[hour_user_items[i]])
        # begin_user
        hour_user_items = []
        for i in range(0, len(hour_group_user_first_hour)):
            for y in range(0, len(hour)):
                if hour_group_user_first_hour[i] == hour[y]:
                    hour_user_items.append(hour.index(hour[y]))
        hour_group_user_first_hour = []
        for i in range(0, len(hour_user_items)):
            hour_group_user_first_hour.append(time_begin_lesson[hour_user_items[i]])
        hour_user_items = []
        # last_friend
        for i in range(0, len(hour_group_friend_last_hour)):
            for y in range(0, len(hour)):
                if hour_group_friend_last_hour[i] == hour[y]:
                    hour_user_items.append(hour.index(hour[y]))
        hour_group_friend_last_hour = []
        for i in range(0, len(hour_user_items)):
            hour_group_friend_last_hour.append(time_end_lesson[hour_user_items[i]])
        # begin_friend
        hour_user_items = []
        for i in range(0, len(hour_group_friend_first_hour)):
            for y in range(0, len(hour)):
                if hour_group_friend_first_hour[i] == hour[y]:
                    hour_user_items.append(hour.index(hour[y]))
        hour_group_friend_first_hour = []
        for i in range(0, len(hour_user_items)):
            hour_group_friend_first_hour.append(time_begin_lesson[hour_user_items[i]])
        if len(hour_group_user_last_hour) == 0 and len(hour_group_friend_last_hour) > 0:
            bot.send_message(message.chat.id, f'–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –Ω–µ —É–π–¥–µ—Ç–µ –≤–º–µ—Å—Ç–µ, —Ç—ã –Ω–µ —É—á–∏—à—å—Å—è –≤ —ç—Ç–æ—Ç –¥–µ–Ω—å,'
                                              f' –∞ —Ç–≤–æ–π –¥—Ä—É–≥ –∑–∞–∫–æ–Ω—á–∏—Ç –≤ '
                                              f'<b><u>{hour_group_friend_last_hour[-1]}</u></b>.\n'
                                              f'–ù–µ –≥—Ä—É—Å—Ç–∏—Ç–µ, –º–æ–∂–µ—Ç –≤ –¥—Ä—É–≥–æ–π —Ä–∞–∑üòé', parse_mode='html')
            bot.send_photo(message.chat.id, photo=open('C:/Users/Anastasia/Desktop/algorithm-master/sed.jpg', 'rb'), reply_markup=murkup_quit_home_menu)  ########
        elif len(hour_group_friend_last_hour) == 0 and len(hour_group_user_last_hour) == 0:
            bot.send_message(message.chat.id, f'–°–µ–≥–æ–¥–Ω—è –Ω–∏ —Ç—ã, –Ω–∏ —Ç–≤–æ–π –¥—Ä—É–≥ –Ω–µ —É—á–∏—Ç–µ—Å—å!\n'
                                              f'üéâüéâüéâüéâüéâ', parse_mode='html',
                             reply_markup=murkup_quit_home_menu)
        elif len(hour_group_friend_last_hour) == 0 and len(hour_group_user_last_hour) > 0:
            bot.send_message(message.chat.id, f'–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –Ω–µ —É–π–¥–µ—Ç–µ –≤–º–µ—Å—Ç–µ, —Ç—ã –∑–∞–∫–æ–Ω—á–∏—à—å –≤ '
                                              f'<b><u>{hour_group_user_last_hour[-1]}</u></b>,'
                                              f' –∞ —Ç–≤–æ–π –¥—Ä—É–≥ —Å–µ–≥–æ–¥–Ω—è –Ω–µ —É—á–∏—Ç—Å—è.\n'
                                              f'–ù–µ –≥—Ä—É—Å—Ç–∏—Ç–µ, –º–æ–∂–µ—Ç –≤ –¥—Ä—É–≥–æ–π —Ä–∞–∑üòé', parse_mode='html')
            bot.send_photo(message.chat.id, photo=open('C:/Users/Anastasia/Desktop/algorithm-master/sed.jpg', 'rb'), reply_markup=murkup_quit_home_menu)  ########
        elif len(hour_group_friend_last_hour) > 0 and len(hour_group_user_last_hour) > 0:
            if hour_group_user_last_hour[-1] == hour_group_friend_last_hour[-1]:
                if hour_group_user_first_hour[0] == hour_group_friend_first_hour[0]:
                    bot.send_message(message.chat.id, f'–î–∞, –≤—ã —Å–º–æ–∂–µ—Ç–µ —É–π—Ç–∏ –≤–º–µ—Å—Ç–µ —Å –¥—Ä—É–≥–æ–º. –ù–æ –∏ –ø–æ–π—Ç–∏ –Ω–∞'
                                                      f' —É—Ä–æ–∫–∏ –≤—ã —Å–º–æ–∂–µ—Ç–µ –≤–º–µ—Å—Ç–µ, –≤–µ–¥—å –Ω–∞—á–∏–Ω–∞–µ—Ç–µ –≤—ã –≤ '
                                                      f'<b><u>{hour_group_friend_first_hour[0]}</u></b>, –∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ –≤ '
                                                      f'<b><u>{hour_group_friend_last_hour[-1]}</u></b>üòé',
                                     parse_mode='html')
                    bot.send_photo(message.chat.id, photo=open('C:/Users/Anastasia/Desktop/algorithm-master/happy.jpg', 'rb'), reply_markup=murkup_quit_home_menu)  ########
                else:
                    bot.send_message(message.chat.id, f'–î–∞, –≤—ã —Å–º–æ–∂–µ—Ç–µ —É–π—Ç–∏ –≤–º–µ—Å—Ç–µ —Å –¥—Ä—É–≥–æ–º. –ù–æ –ø–æ–π—Ç–∏ –Ω–∞'
                                                      f' —É—Ä–æ–∫–∏ –≤–º–µ—Å—Ç–µ –Ω–µ —Å–º–æ–∂–µ—Ç–µ. –í—ã –∑–∞–∫–æ–Ω—á–∏—Ç–µ –≤'
                                                      f' <b><u>{hour_group_friend_last_hour[-1]}</u></b>.üòé',
                                     parse_mode='html')
                    bot.send_photo(message.chat.id, photo=open('C:/Users/Anastasia/Desktop/algorithm-master/happy.jpg', 'rb'), reply_markup=murkup_quit_home_menu)  ########
            else:
                if hour_group_user_first_hour[0] == hour_group_friend_first_hour[0]:
                    bot.send_message(message.chat.id,
                                     f'–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –Ω–µ —Å–º–æ–∂–µ—Ç–µ —É–π—Ç–∏ –≤–º–µ—Å—Ç–µ —Å –¥—Ä—É–≥–æ–º.'
                                     f' –ù–æ –ø–æ–π—Ç–∏ –Ω–∞ —É—Ä–æ–∫–∏ –≤–º–µ—Å—Ç–µ –º–æ–∂–µ—Ç–µ, –≤–µ–¥—å –Ω–∞—á–∏–Ω–∞–µ—Ç–µ –≤—ã –≤ '
                                     f'<b><u>{hour_group_friend_first_hour[0]}</u></b>üòé',
                                     parse_mode='html')
                    bot.send_photo(message.chat.id, photo=open('C:/Users/Anastasia/Desktop/algorithm-master/sed.jpg', 'rb'), reply_markup=murkup_quit_home_menu)  ########
                else:
                    bot.send_message(message.chat.id, f'–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –Ω–µ —Å–º–æ–∂–µ—Ç–µ —É–π—Ç–∏ –≤–º–µ—Å—Ç–µ –∏ –ø–æ–π—Ç–∏ –≤–º–µ—Å—Ç–µ —Å –¥—Ä—É–≥–æ–º.',
                                     parse_mode='html')
                    bot.send_photo(message.chat.id, photo=open('C:/Users/Anastasia/Desktop/algorithm-master/sed.jpg', 'rb'), reply_markup=murkup_quit_home_menu)  ########
    elif message.text == '–ü—Ç-2':
        hour_group_user_last_hour = []
        hour_group_friend_last_hour = []
        hour_group_user_first_hour = []
        hour_group_friend_first_hour = []
        hour_group_user_last_hour = times_db('–ü–Ø–¢–ù–ò–¶–ê', '2', message.from_user.id)
        hour_group_friend_last_hour = times_db_friend('–ü–Ø–¢–ù–ò–¶–ê', '2', name_group)
        hour_group_user_first_hour = times_db_first('–ü–Ø–¢–ù–ò–¶–ê', '2', message.from_user.id)
        hour_group_friend_first_hour = times_db_friend_first('–ü–Ø–¢–ù–ò–¶–ê', '2', name_group)
        murkup_quit_home_menu = types.ReplyKeyboardMarkup(resize_keyboard=True)
        quit_menu = types.KeyboardButton('–ú–µ–Ω—é')
        murkup_quit_home_menu.add(quit_menu)
        hour_user_items = []
        time_begin_lesson = ['8:30', '10:10', '11:50', '13:40', '15:20', '17:00']
        time_end_lesson = ['10:00', '11:40', '13:20', '15:10', '16:50', '18:30']
        hour = ['1-2', '3-4', '5-6', '7-8', '9-10', '11-12']
        # last_user
        for i in range(0, len(hour_group_user_last_hour)):
            for y in range(0, len(hour)):
                if hour_group_user_last_hour[i] == hour[y]:
                    hour_user_items.append(hour.index(hour[y]))
        hour_group_user_last_hour = []
        for i in range(0, len(hour_user_items)):
            hour_group_user_last_hour.append(time_end_lesson[hour_user_items[i]])
        # begin_user
        hour_user_items = []
        for i in range(0, len(hour_group_user_first_hour)):
            for y in range(0, len(hour)):
                if hour_group_user_first_hour[i] == hour[y]:
                    hour_user_items.append(hour.index(hour[y]))
        hour_group_user_first_hour = []
        for i in range(0, len(hour_user_items)):
            hour_group_user_first_hour.append(time_begin_lesson[hour_user_items[i]])
        hour_user_items = []
        # last_friend
        for i in range(0, len(hour_group_friend_last_hour)):
            for y in range(0, len(hour)):
                if hour_group_friend_last_hour[i] == hour[y]:
                    hour_user_items.append(hour.index(hour[y]))
        hour_group_friend_last_hour = []
        for i in range(0, len(hour_user_items)):
            hour_group_friend_last_hour.append(time_end_lesson[hour_user_items[i]])
        # begin_friend
        hour_user_items = []
        for i in range(0, len(hour_group_friend_first_hour)):
            for y in range(0, len(hour)):
                if hour_group_friend_first_hour[i] == hour[y]:
                    hour_user_items.append(hour.index(hour[y]))
        hour_group_friend_first_hour = []
        for i in range(0, len(hour_user_items)):
            hour_group_friend_first_hour.append(time_begin_lesson[hour_user_items[i]])
        if len(hour_group_user_last_hour) == 0 and len(hour_group_friend_last_hour) > 0:
            bot.send_message(message.chat.id, f'–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –Ω–µ —É–π–¥–µ—Ç–µ –≤–º–µ—Å—Ç–µ, —Ç—ã –Ω–µ —É—á–∏—à—å—Å—è –≤ —ç—Ç–æ—Ç –¥–µ–Ω—å,'
                                              f' –∞ —Ç–≤–æ–π –¥—Ä—É–≥ –∑–∞–∫–æ–Ω—á–∏—Ç –≤ '
                                              f'<b><u>{hour_group_friend_last_hour[-1]}</u></b>.\n'
                                              f'–ù–µ –≥—Ä—É—Å—Ç–∏—Ç–µ, –º–æ–∂–µ—Ç –≤ –¥—Ä—É–≥–æ–π —Ä–∞–∑üòé', parse_mode='html')
            bot.send_photo(message.chat.id, photo=open('C:/Users/Anastasia/Desktop/algorithm-master/sed.jpg', 'rb'), reply_markup=murkup_quit_home_menu)  ########
        elif len(hour_group_friend_last_hour) == 0 and len(hour_group_user_last_hour) == 0:
            bot.send_message(message.chat.id, f'–°–µ–≥–æ–¥–Ω—è –Ω–∏ —Ç—ã, –Ω–∏ —Ç–≤–æ–π –¥—Ä—É–≥ –Ω–µ —É—á–∏—Ç–µ—Å—å!\n'
                                              f'üéâüéâüéâüéâüéâ', parse_mode='html',
                             reply_markup=murkup_quit_home_menu)
        elif len(hour_group_friend_last_hour) == 0 and len(hour_group_user_last_hour) > 0:
            bot.send_message(message.chat.id, f'–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –Ω–µ —É–π–¥–µ—Ç–µ –≤–º–µ—Å—Ç–µ, —Ç—ã –∑–∞–∫–æ–Ω—á–∏—à—å –≤ '
                                              f'<b><u>{hour_group_user_last_hour[-1]}</u></b>,'
                                              f' –∞ —Ç–≤–æ–π –¥—Ä—É–≥ —Å–µ–≥–æ–¥–Ω—è –Ω–µ —É—á–∏—Ç—Å—è.\n'
                                              f'–ù–µ –≥—Ä—É—Å—Ç–∏—Ç–µ, –º–æ–∂–µ—Ç –≤ –¥—Ä—É–≥–æ–π —Ä–∞–∑üòé', parse_mode='html')
            bot.send_photo(message.chat.id, photo=open('C:/Users/Anastasia/Desktop/algorithm-master/sed.jpg', 'rb'), reply_markup=murkup_quit_home_menu)  ########
        elif len(hour_group_friend_last_hour) > 0 and len(hour_group_user_last_hour) > 0:
            if hour_group_user_last_hour[-1] == hour_group_friend_last_hour[-1]:
                if hour_group_user_first_hour[0] == hour_group_friend_first_hour[0]:
                    bot.send_message(message.chat.id, f'–î–∞, –≤—ã —Å–º–æ–∂–µ—Ç–µ —É–π—Ç–∏ –≤–º–µ—Å—Ç–µ —Å –¥—Ä—É–≥–æ–º. –ù–æ –∏ –ø–æ–π—Ç–∏ –Ω–∞'
                                                      f' —É—Ä–æ–∫–∏ –≤—ã —Å–º–æ–∂–µ—Ç–µ –≤–º–µ—Å—Ç–µ, –≤–µ–¥—å –Ω–∞—á–∏–Ω–∞–µ—Ç–µ –≤—ã –≤ '
                                                      f'<b><u>{hour_group_friend_first_hour[0]}</u></b>, –∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ –≤ '
                                                      f'<b><u>{hour_group_friend_last_hour[-1]}</u></b>üòé',
                                     parse_mode='html')
                    bot.send_photo(message.chat.id, photo=open('C:/Users/Anastasia/Desktop/algorithm-master/happy.jpg', 'rb'), reply_markup=murkup_quit_home_menu)  ########
                else:
                    bot.send_message(message.chat.id, f'–î–∞, –≤—ã —Å–º–æ–∂–µ—Ç–µ —É–π—Ç–∏ –≤–º–µ—Å—Ç–µ —Å –¥—Ä—É–≥–æ–º. –ù–æ –ø–æ–π—Ç–∏ –Ω–∞'
                                                      f' —É—Ä–æ–∫–∏ –≤–º–µ—Å—Ç–µ –Ω–µ —Å–º–æ–∂–µ—Ç–µ. –í—ã –∑–∞–∫–æ–Ω—á–∏—Ç–µ –≤'
                                                      f' <b><u>{hour_group_friend_last_hour[-1]}</u></b>üòé',
                                     parse_mode='html')
                    bot.send_photo(message.chat.id, photo=open('C:/Users/Anastasia/Desktop/algorithm-master/happy.jpg', 'rb'), reply_markup=murkup_quit_home_menu)  ########
            else:
                if hour_group_user_first_hour[0] == hour_group_friend_first_hour[0]:
                    bot.send_message(message.chat.id,
                                     f'–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –Ω–µ —Å–º–æ–∂–µ—Ç–µ —É–π—Ç–∏ –≤–º–µ—Å—Ç–µ —Å –¥—Ä—É–≥–æ–º.'
                                     f' –ù–æ –ø–æ–π—Ç–∏ –Ω–∞ —É—Ä–æ–∫–∏ –≤–º–µ—Å—Ç–µ –º–æ–∂–µ—Ç–µ, –≤–µ–¥—å –Ω–∞—á–∏–Ω–∞–µ—Ç–µ –≤—ã –≤ '
                                     f'<b><u>{hour_group_friend_first_hour[0]}</u></b>üòé',
                                     parse_mode='html')
                    bot.send_photo(message.chat.id, photo=open('C:/Users/Anastasia/Desktop/algorithm-master/sed.jpg', 'rb'), reply_markup=murkup_quit_home_menu)  ########
                else:
                    bot.send_message(message.chat.id, f'–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –Ω–µ —Å–º–æ–∂–µ—Ç–µ —É–π—Ç–∏ –≤–º–µ—Å—Ç–µ –∏ –ø–æ–π—Ç–∏ –≤–º–µ—Å—Ç–µ —Å –¥—Ä—É–≥–æ–º.',
                                     parse_mode='html')
                    bot.send_photo(message.chat.id, photo=open('C:/Users/Anastasia/Desktop/algorithm-master/sed.jpg', 'rb'), reply_markup=murkup_quit_home_menu)  ########
    elif message.text == '–°–±-2':
        hour_group_user_last_hour = []
        hour_group_friend_last_hour = []
        hour_group_user_first_hour = []
        hour_group_friend_first_hour = []
        hour_group_user_last_hour = times_db('–°–£–ë–ë–û–¢–ê', '2', message.from_user.id)
        hour_group_friend_last_hour = times_db_friend('–°–£–ë–ë–û–¢–ê', '2', name_group)
        hour_group_user_first_hour = times_db_first('–°–£–ë–ë–û–¢–ê', '2', message.from_user.id)
        hour_group_friend_first_hour = times_db_friend_first('–°–£–ë–ë–û–¢–ê', '2', name_group)
        murkup_quit_home_menu = types.ReplyKeyboardMarkup(resize_keyboard=True)
        quit_menu = types.KeyboardButton('–ú–µ–Ω—é')
        murkup_quit_home_menu.add(quit_menu)
        hour_user_items = []
        time_begin_lesson = ['8:30', '10:10', '11:50', '13:40', '15:20', '17:00']
        time_end_lesson = ['10:00', '11:40', '13:20', '15:10', '16:50', '18:30']
        hour = ['1-2', '3-4', '5-6', '7-8', '9-10', '11-12']
        # last_user
        for i in range(0, len(hour_group_user_last_hour)):
            for y in range(0, len(hour)):
                if hour_group_user_last_hour[i] == hour[y]:
                    hour_user_items.append(hour.index(hour[y]))
        hour_group_user_last_hour = []
        for i in range(0, len(hour_user_items)):
            hour_group_user_last_hour.append(time_end_lesson[hour_user_items[i]])
        # begin_user
        hour_user_items = []
        for i in range(0, len(hour_group_user_first_hour)):
            for y in range(0, len(hour)):
                if hour_group_user_first_hour[i] == hour[y]:
                    hour_user_items.append(hour.index(hour[y]))
        hour_group_user_first_hour = []
        for i in range(0, len(hour_user_items)):
            hour_group_user_first_hour.append(time_begin_lesson[hour_user_items[i]])
        hour_user_items = []
        # last_friend
        for i in range(0, len(hour_group_friend_last_hour)):
            for y in range(0, len(hour)):
                if hour_group_friend_last_hour[i] == hour[y]:
                    hour_user_items.append(hour.index(hour[y]))
        hour_group_friend_last_hour = []
        for i in range(0, len(hour_user_items)):
            hour_group_friend_last_hour.append(time_end_lesson[hour_user_items[i]])
        # begin_friend
        hour_user_items = []
        for i in range(0, len(hour_group_friend_first_hour)):
            for y in range(0, len(hour)):
                if hour_group_friend_first_hour[i] == hour[y]:
                    hour_user_items.append(hour.index(hour[y]))
        hour_group_friend_first_hour = []
        for i in range(0, len(hour_user_items)):
            hour_group_friend_first_hour.append(time_begin_lesson[hour_user_items[i]])
        if len(hour_group_user_last_hour) == 0 and len(hour_group_friend_last_hour) > 0:
            bot.send_message(message.chat.id, f'–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –Ω–µ —É–π–¥–µ—Ç–µ –≤–º–µ—Å—Ç–µ, —Ç—ã –Ω–µ —É—á–∏—à—å—Å—è –≤ —ç—Ç–æ—Ç –¥–µ–Ω—å,'
                                              f' –∞ —Ç–≤–æ–π –¥—Ä—É–≥ –∑–∞–∫–æ–Ω—á–∏—Ç –≤ '
                                              f'<b><u>{hour_group_friend_last_hour[-1]}</u></b>.\n'
                                              f'–ù–µ –≥—Ä—É—Å—Ç–∏—Ç–µ, –º–æ–∂–µ—Ç –≤ –¥—Ä—É–≥–æ–π —Ä–∞–∑üòé', parse_mode='html')
            bot.send_photo(message.chat.id, photo=open('C:/Users/Anastasia/Desktop/algorithm-master/sed.jpg', 'rb'), reply_markup=murkup_quit_home_menu)  ########
        elif len(hour_group_friend_last_hour) == 0 and len(hour_group_user_last_hour) == 0:
            bot.send_message(message.chat.id, f'–°–µ–≥–æ–¥–Ω—è –Ω–∏ —Ç—ã, –Ω–∏ —Ç–≤–æ–π –¥—Ä—É–≥ –Ω–µ —É—á–∏—Ç–µ—Å—å!\n'
                                              f'üéâüéâüéâüéâüéâ', parse_mode='html',
                             reply_markup=murkup_quit_home_menu)
        elif len(hour_group_friend_last_hour) == 0 and len(hour_group_user_last_hour) > 0:
            bot.send_message(message.chat.id, f'–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –Ω–µ —É–π–¥–µ—Ç–µ –≤–º–µ—Å—Ç–µ, —Ç—ã –∑–∞–∫–æ–Ω—á–∏—à—å –≤ '
                                              f'<b><u>{hour_group_user_last_hour[-1]}</u></b>,'
                                              f' –∞ —Ç–≤–æ–π –¥—Ä—É–≥ —Å–µ–≥–æ–¥–Ω—è –Ω–µ —É—á–∏—Ç—Å—è.\n'
                                              f'–ù–µ –≥—Ä—É—Å—Ç–∏—Ç–µ, –º–æ–∂–µ—Ç –≤ –¥—Ä—É–≥–æ–π —Ä–∞–∑üòé', parse_mode='html')
            bot.send_photo(message.chat.id, photo=open('C:/Users/Anastasia/Desktop/algorithm-master/sed.jpg', 'rb'), reply_markup=murkup_quit_home_menu)  ########
        elif len(hour_group_friend_last_hour) > 0 and len(hour_group_user_last_hour) > 0:
            if hour_group_user_last_hour[-1] == hour_group_friend_last_hour[-1]:
                if hour_group_user_first_hour[0] == hour_group_friend_first_hour[0]:
                    bot.send_message(message.chat.id, f'–î–∞, –≤—ã —Å–º–æ–∂–µ—Ç–µ —É–π—Ç–∏ –≤–º–µ—Å—Ç–µ —Å –¥—Ä—É–≥–æ–º. –ù–æ –∏ –ø–æ–π—Ç–∏ –Ω–∞'
                                                      f' —É—Ä–æ–∫–∏ –≤—ã —Å–º–æ–∂–µ—Ç–µ –≤–º–µ—Å—Ç–µ, –≤–µ–¥—å –Ω–∞—á–∏–Ω–∞–µ—Ç–µ –≤—ã –≤ '
                                                      f'<b><u>{hour_group_friend_first_hour[0]}</u></b>, –∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ –≤ '
                                                      f'<b><u>{hour_group_friend_last_hour[-1]}</u></b>üòé',
                                     parse_mode='html')
                    bot.send_photo(message.chat.id, photo=open('C:/Users/Anastasia/Desktop/algorithm-master/happy.jpg', 'rb'), reply_markup=murkup_quit_home_menu)  ########
                else:
                    bot.send_message(message.chat.id, f'–î–∞, –≤—ã —Å–º–æ–∂–µ—Ç–µ —É–π—Ç–∏ –≤–º–µ—Å—Ç–µ —Å –¥—Ä—É–≥–æ–º. –ù–æ –ø–æ–π—Ç–∏ –Ω–∞'
                                                      f' —É—Ä–æ–∫–∏ –≤–º–µ—Å—Ç–µ –Ω–µ —Å–º–æ–∂–µ—Ç–µ. –í—ã –∑–∞–∫–æ–Ω—á–∏—Ç–µ –≤'
                                                      f' <b><u>{hour_group_friend_last_hour[-1]}</u></b>üòé',
                                     parse_mode='html')
                    bot.send_photo(message.chat.id, photo=open('C:/Users/Anastasia/Desktop/algorithm-master/happy.jpg', 'rb'), reply_markup=murkup_quit_home_menu)  ########
            else:
                if hour_group_user_first_hour[0] == hour_group_friend_first_hour[0]:
                    bot.send_message(message.chat.id,
                                     f'–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –Ω–µ —Å–º–æ–∂–µ—Ç–µ —É–π—Ç–∏ –≤–º–µ—Å—Ç–µ —Å –¥—Ä—É–≥–æ–º.'
                                     f' –ù–æ –ø–æ–π—Ç–∏ –Ω–∞ —É—Ä–æ–∫–∏ –≤–º–µ—Å—Ç–µ –º–æ–∂–µ—Ç–µ, –≤–µ–¥—å –Ω–∞—á–∏–Ω–∞–µ—Ç–µ –≤—ã –≤ '
                                     f'<b><u>{hour_group_friend_first_hour[0]}</u></b>üòé',
                                     parse_mode='html')
                    bot.send_photo(message.chat.id, photo=open('C:/Users/Anastasia/Desktop/algorithm-master/sed.jpg', 'rb'), reply_markup=murkup_quit_home_menu)  ########
                else:
                    bot.send_message(message.chat.id, f'–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –Ω–µ —Å–º–æ–∂–µ—Ç–µ —É–π—Ç–∏ –≤–º–µ—Å—Ç–µ –∏ –ø–æ–π—Ç–∏ –≤–º–µ—Å—Ç–µ —Å –¥—Ä—É–≥–æ–º.',
                                     parse_mode='html')
                    bot.send_photo(message.chat.id, photo=open('C:/Users/Anastasia/Desktop/algorithm-master/sed.jpg', 'rb'), reply_markup=murkup_quit_home_menu)  ########





    # elif call.data == 'wed_chet_friend':
    #
    # elif call.data == 'thu_chet_friend':
    #
    # elif call.data == 'fri_chet_friend':
    #
    # elif call.data == 'sat_chet_friend':
# RUN
bot.polling(none_stop=True)